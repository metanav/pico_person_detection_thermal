/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 11.03.2021 00:56:19

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 13040;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[33];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[14];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,768 } };
const TfArray<1, float> quant0_scale = { 1, { 0.25145098567008972, } };
const TfArray<1, int> quant0_zero = { 1, { -99 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 192, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[4] = { 1, 24, 32, 1, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data3[8] = { -490, 82, 68, -314, -77, -525, 19, -161, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<8, float> quant3_scale = { 8, { 0.00045935530215501785, 0.00050838681636378169, 0.00059157790383324027, 0.00059186993166804314, 0.00057371455477550626, 0.00025536812609061599, 0.00058566674124449492, 0.0003654301690403372, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[64] = { -26, -18, -80, -195, 47, 19, -174, -181, -245, -14, -24, -55, 351, -162, -124, -196, -231, -24, 332, 105, 355, -11, -166, 312, -152, -153, -198, -162, -76, -144, -33, -5, 321, -209, -44, -25, -56, -214, 202, -297, -52, -79, -89, -27, 181, 197, 341, -25, -63, -191, -33, -241, -45, 112, -73, -68, -49, 177, 307, 256, 312, -87, -190, 158, };
const TfArray<1, int> tensor_dimension4 = { 1, { 64 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00034965420491062105, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[32] = { -58, -202, -279, 450, 351, 189, 229, 65, 248, -252, 120, -54, 59, -6, -182, -246, -176, 177, 4, 292, 202, 123, 47, -198, 90, 224, -192, -52, 259, 3, 329, -255, };
const TfArray<1, int> tensor_dimension5 = { 1, { 32 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00046993116848170757, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[3] = { 65, -160, 79, };
const TfArray<1, int> tensor_dimension6 = { 1, { 3 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0011088437167927623, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[8] = { -774, -773, -1195, -43, -310, -127, -1242, -1091, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00013248386676423252, 0.00019097952463198453, 0.00016217841766774654, 0.00015255012840498239, 0.00014550492051057518, 0.00013638559903483838, 0.0001608567254152149, 0.00017162883887067437, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[8] = { 955, -1998, -1927, 720, -2335, -2086, -2120, 1665, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 6.261518137762323e-05, 9.5544040959794074e-05, 8.4111692558508366e-05, 7.8570818004664034e-05, 7.1645823481958359e-05, 8.799372153589502e-05, 7.3695657192729414e-05, 7.4061616032849997e-05, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int32_t tensor_data9[16] = { -232, -835, 952, -1109, -1407, -823, -914, -63, -167, -733, -949, 1083, -1593, -604, 1226, -330, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 0.00014303998614195734, 0.00015413315850310028, 9.5981078629847616e-05, 8.4541818068828434e-05, 9.399599366588518e-05, 0.00011108388571301475, 0.00012034802784910426, 0.00011264981731073931, 0.0001024227385642007, 9.9132237664889544e-05, 0.00010536525951465592, 7.8073659096844494e-05, 0.00011492119665490463, 0.00010895907325902954, 0.00011931699555134401, 9.8719261586666107e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[16] = { 170, -970, -469, 1500, 522, -296, -818, -157, -369, 1084, -860, -942, 1247, 1214, -954, 1613, };
const TfArray<1, int> tensor_dimension10 = { 1, { 16 } };
const TfArray<16, float> quant10_scale = { 16, { 0.00014181472943164408, 0.00011510849435580894, 0.00010550393926678225, 0.00014001189265400171, 8.2702943473123014e-05, 8.997404802357778e-05, 0.0001119907756219618, 8.8668166426941752e-05, 0.00013135009794496, 0.00010733457747846842, 0.00011306249507470056, 0.0001569441519677639, 0.0001140833628596738, 0.0001443468063371256, 0.00010009087418438867, 0.0001211225098813884, } };
const TfArray<16, int> quant10_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int8_t tensor_data11[32*64] = { 
  -58, 18, -59, 6, -33, 14, 98, -16, 103, -24, 0, -60, -30, 29, 17, 53, -13, 8, -58, 3, -34, -25, -29, -9, 76, 10, 63, -32, 8, -39, -4, 15, 5, 50, -29, -40, 22, 66, 32, 71, -8, 28, -15, 44, -9, -43, 16, -46, -25, -17, -54, 72, 20, -18, 15, 24, 34, 64, -33, -3, 30, -9, 60, 62, 
  -51, -10, 55, 37, -21, -16, 50, -11, -38, -54, 28, -51, 40, 23, 67, -27, -50, -62, -12, 48, -17, 50, 49, 15, 66, 38, 39, -13, 35, 82, -52, 15, -23, 39, 49, -24, -68, -8, 50, -1, -36, -41, -78, 33, -44, -59, 4, -14, -23, 33, 31, 27, 8, 5, -33, -18, -16, 36, -56, -68, -86, -25, -30, -15, 
  17, -49, 21, 74, -9, 15, 78, 51, 4, 12, 81, 48, -15, 58, 12, 127, 30, -12, -10, 15, -88, -9, 67, -28, 48, 46, -18, 74, 68, 65, 58, -7, -9, 35, 10, 41, 56, -54, -3, -7, 46, 54, 17, -62, 60, -14, 39, 23, -52, 64, -51, 65, -19, 21, 62, -67, 23, 25, -3, -21, 47, 61, -20, 54, 
  -23, -53, 2, -63, 17, -42, 35, -32, -36, 14, -58, -59, 68, -13, -23, 1, -1, -66, 79, -49, 30, -34, 3, 70, -28, 8, -44, 17, 31, -66, 6, -24, 40, 19, -20, 33, 51, -29, 61, 46, -39, -49, 61, 33, -10, 75, 82, -65, -2, -31, -6, -6, 11, -61, 57, 62, 59, -15, 29, -34, -41, -8, 15, 74, 
  -19, -34, -35, 0, -64, -19, -72, 36, -69, -41, 34, -4, 21, 17, -62, -65, -35, 24, 68, 31, 18, -34, -55, 55, 43, 56, -51, -70, -52, -69, -45, 35, 30, 40, 37, 47, -48, 7, 80, -1, -54, 13, -48, 31, -40, 12, 57, 8, 4, -17, 39, 45, -14, -4, 57, 65, -47, -4, 44, -3, 34, -64, -30, 37, 
  -15, -20, -59, -46, 64, 9, -70, -48, -34, -18, -63, 9, 12, 21, 61, -20, -73, -45, 45, 26, 12, 15, 10, 89, 30, -35, -28, -44, -43, -72, -49, 74, 39, -72, -8, -48, -1, -6, -2, 61, -36, -66, -22, -2, 41, 3, 2, 63, -47, -2, 9, -60, -16, 53, 37, -46, -80, -19, 84, 48, 5, 47, 40, 14, 
  24, 57, -43, 32, -6, 8, -36, 48, -84, 15, 20, 6, 64, -56, -36, -54, -55, 17, 43, 44, 59, 41, -29, 68, 44, -37, -23, 30, -29, 19, 43, -30, 3, 18, -45, -51, 17, -4, 68, -63, 26, -37, 46, -48, -27, -52, 19, -42, -36, 13, -25, -53, 18, 25, 13, -49, -43, 38, 30, 23, 19, -43, -32, 11, 
  -11, -15, -34, -12, 63, 46, 37, 22, -9, 27, -56, -5, 60, -12, -54, 21, -6, 53, -9, -60, 36, -37, -53, -57, -38, -43, -11, 2, 46, -89, 23, 12, -25, 31, 68, -25, 49, -43, -18, -37, 44, 22, 48, 24, -2, 58, 35, -31, 59, -25, -16, -65, -4, -68, -29, 51, 21, 53, -61, -16, -9, -50, -72, 60, 
  -50, 3, -43, -72, 7, 40, 38, -28, 50, -24, 27, -22, 62, 52, -89, -12, 39, -3, 21, -58, 28, 21, -56, -70, 8, -68, -3, 15, 74, -65, 42, 4, -13, 5, -14, -17, -41, -62, 20, -33, 43, -15, 81, 4, -13, 49, 0, 10, -34, -25, 42, 10, 67, -27, 19, 65, 63, 55, 13, -19, -27, -9, -87, 5, 
  -68, -40, 50, -16, -5, -6, 20, 65, 38, 9, -49, 1, -62, -21, 45, -3, -31, -11, 30, -56, 34, 55, -38, 44, 51, 64, 39, 4, 50, 45, 69, -28, -43, -29, 32, 55, -23, -2, -53, -33, -39, 20, -83, -33, -85, 43, -8, 47, 43, 86, 26, 21, -12, 11, -55, -23, 57, 6, -27, -30, -30, 24, -32, -33, 
  24, -43, 11, -70, 25, -35, 30, -80, 6, -52, 14, 64, -20, 40, -68, -18, 30, 50, -35, -63, 3, -9, -60, -42, -73, 6, -17, -62, 42, -9, 17, 22, 21, 33, -35, 19, -61, -85, -25, 20, -49, 45, 18, -30, 60, -30, 82, -66, -19, -63, 29, -40, 19, -26, -9, -43, 74, 15, -35, -62, 33, 53, -1, -57, 
  -70, 13, 0, 17, -3, 71, -1, -41, 44, 37, -54, 22, 20, 21, -21, -8, 67, -4, -15, -41, 14, -13, -24, 22, 59, -3, -15, 22, 8, -6, 55, -83, 36, 54, 60, 35, 28, 20, -27, 12, 51, -30, 47, -57, 25, 12, 63, 27, -29, -79, -6, 20, 14, -21, 58, -47, 86, 53, -73, -78, 7, -54, -72, 18, 
  -41, 50, 40, 10, -2, -36, -33, -29, 64, 28, -46, 28, -33, -27, -53, 64, -28, 31, 39, -34, 39, -9, -13, 22, -16, 40, 3, -48, -48, 1, 19, 17, 43, 73, -61, 53, 10, 15, 5, 9, 55, 52, 21, 11, 35, 31, 7, 33, 31, -64, 50, 18, 12, 10, -51, -48, -26, -8, -21, -101, 0, 9, -25, -18, 
  -60, -29, 34, 52, -36, -37, 38, -30, -45, 57, -11, -2, 18, 28, 44, -13, -54, -34, 20, 98, 48, -34, 2, 23, 9, 55, 32, 56, -41, -30, -30, 16, 31, 16, -4, 54, 63, -11, 51, 62, -45, 2, -5, -26, -13, 17, -16, -53, 61, 19, -55, -39, -30, 52, -59, 49, 11, -10, 65, 122, -20, 20, 17, 12, 
  -56, 0, 59, 68, -16, 9, 9, -9, 31, 56, -11, 3, -47, -45, 63, 44, 37, 29, 45, -19, -8, 26, -27, 35, 51, 41, -37, -8, -16, 34, -12, -35, -92, 48, -14, 31, 19, 67, 28, -53, -26, -58, -59, -36, -85, -28, -59, 66, -2, 77, -54, 54, -66, 19, 46, 18, -52, -47, -37, 55, -79, -18, 90, -32, 
  11, -40, 73, 57, -69, -61, -23, 74, 56, -1, 55, -8, -27, 43, -4, 63, 58, 17, -53, 24, 31, 50, 41, -19, 21, 47, 2, 50, -65, 12, -46, -33, -72, 39, -30, -8, 60, -39, -45, -53, 66, -20, -2, 11, -50, 24, -54, 1, 21, 45, 8, 41, -6, 38, 55, -47, 52, -45, 1, -18, -43, 62, 9, -12, 
  -56, -30, -56, -8, -39, -67, 40, 44, 17, 37, 43, -59, -66, -35, 39, -2, 19, 47, -53, -38, -16, 1, 31, 57, -20, 66, -22, 14, 7, 29, 62, 50, -43, 43, 60, -42, -46, -10, 36, -38, 25, 16, -81, -42, 30, -55, 23, -5, -51, 80, -3, -20, 31, 19, -1, 5, 43, -14, 37, 15, -73, -39, 54, -13, 
  -15, -8, 48, -59, 5, 59, -81, 50, -24, -43, -64, -36, 69, 42, 54, -82, 4, -14, 59, 13, -18, -46, 86, -26, 45, 35, 21, -27, 57, -9, 19, 53, 74, -60, -3, 26, -23, 19, 36, 33, -2, 62, -37, 62, -35, -3, -27, -30, 38, -19, -34, 0, -3, 65, -10, 36, -53, 27, 41, 0, 31, 36, -53, -52, 
  39, 23, 2, 35, 56, 73, 90, 13, 11, -9, 44, 52, 22, 59, -14, -13, -9, 41, -40, -57, -69, 67, 68, -46, 37, -13, 77, 11, 59, 10, 25, -31, 13, 49, -22, -48, -52, -47, 29, 52, -45, -29, -9, 66, -4, -9, -6, -1, 45, -7, -48, 0, -2, -21, -41, 10, 64, -35, 47, -16, -4, -18, -81, 26, 
  -57, 27, -21, 47, -24, -16, -66, 26, -51, 65, -8, -56, 44, -36, 29, -13, 10, -3, 43, 36, 58, -62, -34, 44, 50, -62, -9, -37, 11, -59, 26, -5, 27, -60, 53, 38, -18, -49, 16, 14, 18, -46, -50, -61, 67, 33, -45, 50, 0, -6, 27, 23, 59, 1, 17, 14, 34, 60, 53, -60, 27, 47, -19, 19, 
  61, 12, -64, -3, 58, -31, -44, -29, 17, 39, -21, 48, 13, -19, 46, -81, -48, 10, -1, -55, 84, -51, -89, 70, 8, -64, -64, -16, -73, 24, -48, -20, 23, -69, 27, 38, -48, -63, 33, -16, -30, -17, -54, -23, -27, 20, 19, 35, 20, 44, 62, -64, 35, 43, -38, 57, -43, -10, 40, 57, 35, -31, 7, 10, 
  -42, 22, 25, 21, 32, -15, 18, 17, -42, 37, -25, -64, -37, -17, -60, 40, -46, -61, 58, -49, 5, -33, -48, 50, -69, 60, -42, 38, 6, -55, -59, 28, -57, -52, -43, -8, 52, -26, 43, 18, 6, 38, -51, 8, -21, 5, -12, -31, 41, -4, 3, 12, 47, 71, 9, -32, -3, 1, -40, -41, 51, -63, 50, -54, 
  -60, 20, -28, -1, -2, 25, -39, -42, -34, -10, -21, 3, -3, -42, -15, -47, 58, -38, -46, -38, -23, 29, 7, 4, 14, 18, -12, -17, 58, 0, -37, -37, -36, -55, 47, -23, 18, -24, -31, -70, 16, -31, -33, -8, 40, -4, 27, -27, 37, -30, -13, 16, -47, 46, -61, 6, 48, -54, -44, -33, 16, 38, 17, 55, 
  -56, -21, 18, -24, 63, 8, -41, 33, 13, 40, -35, 56, -11, 49, 35, -39, 34, -15, 56, 11, -44, -13, 96, -43, 59, 50, -18, 48, -55, 42, -44, 44, 76, -14, 42, 56, -34, 41, -34, 63, -66, 41, 15, 44, -45, -66, -63, -24, -20, -57, -2, 11, -21, 98, -59, 20, -100, -64, -4, 2, 26, 59, -4, -10, 
  11, 2, 32, -19, 0, 27, -34, -62, -53, 7, 7, 44, 31, 9, -5, 28, -38, -55, 67, 21, 15, -21, 38, -15, 45, -25, -29, -6, -34, 26, 18, -14, -63, 8, 3, 61, 59, 16, 53, 12, -33, -65, -51, 13, -7, -4, 84, -56, 22, -58, 36, 32, -14, -18, -37, -52, -13, 13, -7, 48, -61, 43, -49, 22, 
  -30, -46, 39, -80, -4, 46, 1, -22, -24, 14, 24, 26, 48, 38, 6, 9, 22, -9, -63, -55, 31, -32, -30, 25, -36, -23, 23, 61, -41, -37, -2, -61, 50, -17, -46, -49, 4, 14, 69, -15, 10, 48, -39, -17, 61, 2, -1, 19, 56, -61, 39, -68, -56, -48, 44, -52, 65, 53, -32, -99, 46, -23, -31, 36, 
  44, 5, 37, 20, -35, -46, 75, 44, -22, -39, -22, 54, -16, 34, -40, -21, 21, -30, -55, -62, -59, 35, 2, 37, 86, 44, 8, -26, -47, 82, 22, -31, 0, 5, 1, 11, 59, -28, -28, -41, -61, 32, 0, -52, -80, -5, -2, -23, 38, 71, 23, 55, 58, -45, -46, 41, -44, 3, -29, 33, 26, 5, 74, 25, 
  50, -30, 34, 14, -18, -5, -4, 59, -37, -15, 13, 9, 52, -61, -38, -20, -34, -10, -27, -36, -13, 28, 10, 22, 55, -15, -22, -47, 56, 10, 33, 32, -36, -53, 48, -13, 28, -64, 45, -55, -62, 30, 25, 6, 21, -50, 4, 20, -42, 54, 9, -11, 53, 36, 46, 18, 3, -33, -15, -31, -28, 0, -40, 11, 
  60, 61, -15, -50, 38, 16, -17, 12, 12, 44, -28, 21, 36, -27, -51, -53, 5, 52, -1, 7, 28, 45, 1, -36, 49, -40, 36, -4, 42, -75, -10, 34, 10, 7, 2, 62, -12, -22, -59, -82, 15, -33, -6, -55, 57, -22, 75, 52, -27, -42, 40, 14, 45, -58, 37, -42, -33, 58, 49, 13, 40, 34, -75, 3, 
  49, -25, 38, 55, -36, -31, -26, 65, -51, -7, -47, 27, -32, -14, -5, -34, -54, -58, -13, 19, 6, 57, 56, -43, -53, 53, 11, 37, -8, -43, -42, -6, -21, 21, 33, -23, -33, -14, 45, -20, -31, 23, -35, 61, 2, 56, 48, -20, 10, -41, -57, 44, -24, -7, 58, -21, 45, -7, -65, 15, -35, -61, 27, 5, 
  -38, -17, -21, -3, -58, 1, -42, 39, -65, -24, 32, -26, 38, 4, 29, -17, -6, -32, 48, 16, 63, -17, 15, 92, -38, -32, -58, 14, -49, -43, 44, 41, -34, -56, 44, -28, 44, -31, 8, -35, -50, -14, -3, 39, 67, 13, 19, 38, 1, 8, -8, -25, -11, 12, 57, -49, 0, 69, 17, 34, 34, -52, -68, 43, 
  -55, -41, 26, 0, 6, 3, 8, 77, 55, -10, -40, -41, -32, 1, -7, -11, -12, -32, 8, 11, -69, -31, -56, -33, 64, 68, 51, 63, -32, 107, -59, 13, -58, 8, -21, -45, 23, 65, 35, 39, -26, 59, -60, -30, -86, -61, -51, -55, -29, 53, 2, 48, 15, -65, -22, 58, -13, -62, -18, -43, -54, 14, 73, 37, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 32,64 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0037688286975026131, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int8_t tensor_data12[3*32] = { 
  -104, -67, 9, 99, 8, 79, 95, -86, -20, 19, -49, 18, -6, 8, 11, 17, 25, 25, -91, 104, 82, 64, -31, -73, -51, 6, -29, -86, 60, -31, 83, 17, 
  34, 77, 65, -30, -77, 67, -32, -94, -26, 23, -75, 38, -4, 18, 86, 89, 93, 22, -2, 18, -53, 1, -62, -16, -76, -93, 10, -59, 0, -59, -42, 67, 
  27, -50, 65, 73, -47, -103, -62, 71, 31, -46, 75, 111, 59, -69, -22, 3, -77, -74, 30, 31, -110, 29, -34, -127, -65, 99, -49, -17, 35, -76, -8, -28, 
};
const TfArray<2, int> tensor_dimension12 = { 2, { 3,32 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0045816274359822273, } };
const TfArray<1, int> quant12_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(8) int8_t tensor_data13[64*192] = { 
  33, 1, -35, -39, -28, -37, -22, 5, -10, -16, 14, -32, -30, -22, 38, 0, -32, 29, -11, -12, 4, -26, 23, -6, 20, -14, 40, 28, 25, 32, 8, -38, 15, -37, 36, 22, -40, -37, -40, -13, 33, -5, 19, -33, 8, -35, -16, -27, 3, 13, 29, 25, -16, -32, 11, -14, -3, 26, -4, -12, -15, 39, -40, -3, 27, -21, 25, 20, 41, 0, 31, -15, -36, -46, -22, 39, 28, -23, 8, 11, 16, 17, -33, -4, -2, 8, 6, 36, 21, 36, -8, 10, 27, -17, -16, -15, -20, 23, 19, 25, 40, -11, -22, 28, 19, 3, -31, 29, -44, 44, -21, 3, 8, -31, 33, 1, -24, -31, 12, -17, -18, -22, -2, -50, 32, -10, 15, -10, -14, -29, 10, 21, -6, -5, 33, 25, 40, 3, 31, 17, -9, 13, -21, -18, 39, -49, -19, 27, 1, 41, 24, -33, 17, -22, -25, -21, 12, -36, 31, 16, -23, -43, -4, 32, -41, -10, -37, -36, 35, -3, -44, 31, 19, 3, 35, 5, -21, -4, 28, -27, 6, 39, 31, 42, -8, -26, 26, 28, -35, -3, 19, 15, 
  32, 28, -22, 31, -42, -2, 0, -25, -21, -34, 22, -30, -27, -22, -34, 17, -19, 10, -5, -36, 39, -9, -21, -5, 14, -25, 24, 2, -2, 40, -29, -17, -40, 18, 37, -12, -21, 6, -30, 7, -41, -16, -18, -7, -45, 11, 32, -42, -20, -20, 27, -9, -43, -35, -19, 31, 8, -35, 33, 19, 28, -27, -37, 31, 33, -28, -12, -18, -18, 2, 41, 15, -39, -20, -34, -36, 30, -4, 0, 48, 22, -7, -7, 4, -36, -19, -16, 19, -44, -15, 20, -32, 15, -42, -34, -13, 28, -43, 20, 27, -28, -30, -1, 6, 42, 18, 25, 16, 3, -5, -16, 35, -6, 2, 2, -11, 20, -26, -15, 5, -29, 19, -12, -15, 32, 6, -34, 27, -14, 30, -18, 25, -2, 20, -31, -5, 1, 1, -9, -27, -23, 35, -9, -24, 15, -8, -43, 36, 33, -9, 21, 14, 10, 28, 13, -26, 23, 26, 21, -3, 40, -8, -15, -23, -11, -20, 40, -28, 25, -44, -5, -25, 28, -18, -11, 34, -30, -39, 24, -29, 23, -6, 41, -22, -32, 22, -41, 45, -7, 31, -27, 23, 
  8, -9, -19, -11, 27, -14, -23, -1, -10, 33, 20, 47, -45, 11, -4, -28, -49, -29, 29, 16, 16, -42, 21, 26, -8, 31, -30, -17, -22, -2, -27, 9, -14, -27, 1, 16, -3, 14, 32, 14, -3, -42, 24, 46, 19, 16, 25, 36, -20, -36, 40, 38, 21, 41, -21, -6, -47, -3, 26, 14, -38, -15, 34, -14, -38, 8, 30, 31, 27, 25, 3, -20, -2, 22, 36, 12, -43, 9, 33, -7, 16, 33, -4, 41, 11, -10, 43, 29, 18, -36, -40, 17, -10, 33, 22, -13, -10, -4, -7, 13, 34, -4, -11, 35, -19, -3, -31, 47, 36, 18, 0, -40, -22, -22, -22, -20, 8, 10, -26, 22, -41, 19, 41, 39, -47, 8, -1, -28, -24, -35, -2, -4, 1, -26, -9, 19, -38, 17, -46, 8, -15, -19, 30, -15, -42, -5, -18, -7, 40, 28, 3, -40, 33, 25, 45, -6, 29, 32, -21, -18, -39, -29, -8, -8, -38, -20, 10, 10, -22, -20, -10, -23, 37, 11, 0, -25, -10, 32, 33, 39, -12, 0, -28, 8, 0, 2, 28, 0, -10, 10, 19, -45, 
  -43, -32, 6, 49, 32, -2, 41, 28, 43, 21, 31, -39, -20, -28, 33, 14, -33, -40, 20, 22, -22, 34, -24, 11, -27, -6, -43, -10, -25, 21, 26, 31, 17, 22, -44, 38, 36, -3, 30, -28, -26, -38, -2, -11, -45, 12, 12, 47, -20, -10, -34, -21, 28, 13, 7, -15, -62, 28, -13, -26, 14, -46, -24, -37, -18, -25, -10, -3, 15, -23, 35, -30, 14, 30, -47, 51, -25, -31, -10, -13, -5, -22, 40, -41, 15, -40, 13, 17, -10, 62, 12, -31, 36, -15, -12, 36, 8, 8, -50, 7, -33, 40, -49, -19, 41, -7, -37, 43, 36, -14, 34, 22, 5, 40, -6, -7, 2, 38, -59, 17, -46, 38, -15, 29, 0, -12, -10, -53, -1, 40, 16, 33, 35, -15, 20, -35, 40, 23, 34, 13, 1, -13, 20, 32, 41, -16, 11, -20, -20, -22, -7, 18, 16, -9, 4, -13, 27, 3, -7, 33, 39, 39, 0, -40, 32, -21, -74, 7, 2, 6, 28, -31, 4, -31, 27, 34, -16, -13, -25, 9, -38, 23, 8, -8, 0, -24, 15, -14, 18, -40, -35, 18, 
  -5, 8, 22, -3, -36, -29, 10, -26, 32, 1, 38, 17, -21, 36, 41, 28, -2, -14, -14, -17, -40, 33, -8, 36, -39, -25, 59, 36, -22, -21, -6, 47, -30, 27, 8, 0, 16, 22, 28, -30, -18, 31, 29, -19, 8, 1, -25, 9, 32, -55, 41, 18, -22, 15, 30, -3, 2, -58, 5, 12, 23, 17, 9, 27, -19, -39, -39, -59, 29, 30, -19, 34, 7, -27, 9, 24, -10, 27, -33, -2, -45, -14, -37, -11, 31, 21, -21, -27, -1, -2, 2, 0, 28, 25, 18, -26, -7, -23, -2, 5, 15, 14, 2, 7, 10, 15, 45, -49, 36, -34, 42, 16, -13, 12, 38, -23, -1, 2, 22, -20, -41, -51, -6, -8, -14, -9, 23, 40, -41, 21, 2, -13, 5, 11, -2, 27, -20, 11, -27, -13, -35, 24, 7, -8, -15, -25, 3, -26, 7, 27, -43, -1, 23, 4, 28, -4, -12, 7, 20, -41, -25, 26, -2, -19, -10, -10, 32, -22, -4, -33, -3, 14, -42, -26, -33, -15, -6, -2, -21, -12, -27, 12, -19, 4, -23, 12, 36, 50, -33, 11, 39, 25, 
  -42, -17, -8, -19, -9, 36, 1, -22, 19, -21, -6, 19, 9, 23, 11, -15, 27, -21, 17, -60, -25, 40, 11, 26, 33, 16, -1, -17, -61, 23, 11, -33, -52, 11, 32, 11, -19, -23, 22, 34, -12, 32, -37, -54, 6, -40, -38, -13, 2, -6, -34, -11, -7, 4, -30, -15, 33, -8, 5, -3, 2, -31, 43, 35, 15, -23, -31, -94, 22, 6, 40, 24, 19, 41, 19, -45, 33, 40, -9, -38, -34, 34, -2, -49, -24, 7, -38, -33, 19, -23, 20, 48, -19, 37, -19, -2, 31, -11, 33, -5, 7, -24, 43, 24, -52, 38, -22, -39, 18, 12, -22, 28, 6, 6, -13, 9, -39, 0, -22, -30, 33, -4, -27, -25, -18, -24, -29, -25, 34, -39, 38, -67, 35, 3, 11, 5, 21, -34, 20, -24, 30, -11, 2, -53, -24, 24, -1, -36, -37, -39, 5, 36, 43, 33, -34, 0, 41, 29, 26, -53, 11, 10, -7, -1, 28, 15, 7, 33, -40, -13, 5, -29, 22, -23, 6, 16, 26, -12, 25, 4, 8, 19, 30, 26, 11, 22, -14, 15, 7, -27, -4, 1, 
  -68, 25, -17, -37, -34, -15, 61, -27, 8, -12, 35, -15, -18, -15, 67, -8, 15, -34, 7, -42, 28, -6, 72, 20, -26, -36, 60, 34, 27, 37, 10, -6, 32, -15, -36, 48, -3, 11, 29, -29, -17, -3, 7, -58, -34, -57, 32, 22, -16, -38, 18, -14, 2, 3, 7, -16, -22, -15, 20, -8, 27, -13, -31, 9, 6, -31, -16, -13, -4, 31, 31, -18, 46, 21, -5, -14, 37, -14, 45, -2, 58, 37, -9, -5, 11, 6, 37, -40, 30, 23, 22, -23, 11, 15, -12, -24, -40, 1, -30, -44, 40, 28, -27, -23, -2, 12, -4, -9, 27, 25, 9, -21, 32, 3, -27, -18, -3, -12, 30, -4, -27, 1, 7, 42, 6, -32, -24, 2, 4, 49, -1, 10, -57, -5, 36, -11, -24, 52, 13, -26, -18, -11, 12, -53, -34, 19, 36, -6, 9, -18, 46, 6, -12, 0, 22, -58, 28, -35, 70, -21, 25, 26, 45, -20, 29, 21, -1, 10, -22, 23, -35, -7, 52, 16, -3, -6, 28, 27, -28, -23, 23, -6, -3, 31, 27, -13, 14, 50, -35, -21, 2, -14, 
  -13, 6, 15, 33, 30, -36, 47, -9, -11, 31, -54, 18, 10, -3, 12, -3, -20, -9, -16, 34, 40, -36, -10, -2, 19, 19, 27, -32, -32, -8, -1, -12, -19, -7, 18, -20, 18, 2, 35, -14, 1, -30, 3, 27, -38, 8, -9, -19, -15, 13, 11, -36, -38, -27, 17, -15, -17, 20, 24, -13, -38, 18, 24, 9, -21, 16, -19, 7, -29, -20, 14, 4, 52, 33, 14, 30, 5, -10, 11, 19, -29, -12, 25, 28, 39, -3, 16, 17, 46, 12, 22, -34, 46, 11, -4, 29, 2, 17, -29, 6, -25, -29, -39, -43, 4, 2, -23, 74, 1, -20, -32, 16, -9, -27, -42, 29, -43, 39, 0, -15, -11, -20, 47, -25, 12, -11, -47, -43, 36, 42, 15, -28, -8, -21, -11, 4, 22, -20, 32, 3, 47, -15, -5, 15, 31, -30, 4, -28, -35, -44, 13, -21, 14, 23, 42, -5, 42, -10, -23, -43, 22, 7, -51, -30, 18, -1, -12, 37, 33, 2, 5, 48, 62, 5, 32, 13, 39, 38, 4, -40, 4, -42, -30, 39, -19, 10, 18, 2, -41, 23, -58, -36, 
  21, 1, 40, 14, -30, 33, 52, -16, -5, 32, 17, -25, -26, -38, 49, -36, -26, 24, -2, -20, 5, -15, 58, 1, -43, -49, 61, 12, -15, -36, 64, -45, 58, -7, 29, -37, 23, 41, 35, 22, -5, -19, -10, -38, -40, 8, 41, 5, 42, 20, 5, 19, -24, -35, -5, -31, 11, 8, -26, 38, 30, -52, -35, -8, 15, 30, 22, -15, 36, 2, 49, 38, 35, -10, -22, -26, -23, -32, -8, -5, 36, -24, -23, -13, -32, 27, 6, -1, 34, 3, 35, 6, 34, -16, 42, 8, -20, 40, 10, -29, 27, -27, 33, -9, -3, 39, 7, -44, -11, -26, -11, -2, 14, 21, -11, -39, -6, -38, -22, -39, -27, 36, -32, 51, -32, -13, 8, -7, 32, -17, 6, -39, -37, 27, 1, -5, -10, -26, 11, 12, 20, 24, 8, -22, 8, 51, 45, -41, -14, -16, -15, 41, 26, 48, -12, -11, 28, -26, -2, -45, 41, 12, -23, -36, 24, 38, 11, 5, -20, 4, -28, -48, 43, -44, -16, -5, 25, 28, -25, -34, -28, -2, -33, -21, 46, 4, 6, 40, -34, -32, -36, 15, 
  26, 33, -25, -24, 13, 23, 15, 22, -9, 40, -39, -35, 1, 18, -14, 37, 7, -2, 3, -35, -44, -3, -19, -8, -16, -28, -44, 15, -13, 26, 34, -3, 4, 6, -24, -14, -17, -31, 20, 0, 5, 16, 7, 10, -31, -24, 11, -27, -16, -29, 21, 24, -36, 34, 32, -17, -38, 39, -6, 33, -26, 36, -23, -36, 22, -42, -39, -26, -31, 6, 1, -19, -10, -34, -10, 15, 3, 8, 33, 8, 23, -29, 1, -5, 35, 21, -7, -2, -41, -43, -45, -24, -30, -43, -12, -31, -12, 9, 8, 25, 39, 0, 6, -24, 28, -16, 19, -11, 13, 18, 40, 19, -5, -34, 11, -34, 32, 0, 27, -5, 15, -41, 5, 4, -26, 1, 8, -42, -38, -23, 10, 12, -2, 24, -34, 37, 40, 26, -26, -41, -41, 28, 13, 7, -2, -29, -4, 37, 30, -20, 35, -1, 41, -18, 29, 28, -1, -1, -24, -32, -41, -26, -30, 33, -19, 1, -15, -21, -24, 19, -38, -38, 26, 33, -26, 18, -28, 28, -41, -37, -32, -31, 11, 7, 10, -15, 13, -2, 20, -6, -24, 9, 
  16, -16, -11, 33, 24, -12, 6, 26, -17, -10, 25, 47, 10, 3, 34, -38, -36, -31, 6, 31, 26, -13, 27, 8, -1, 20, 2, -47, -25, 22, -34, -37, 10, -2, 10, -7, -1, 19, 16, -17, -9, -41, -37, -30, 11, -16, -32, -19, -3, 5, 20, -1, -17, -22, -37, -19, 17, -23, -3, -20, -43, 30, -10, 1, 5, 24, 23, -6, -23, 11, -35, -1, -18, 3, -5, 31, 9, 16, 15, -30, -4, 21, 6, 2, 44, 4, -9, -3, 22, 12, -36, -55, 6, -33, 21, -45, 14, 38, 9, -27, 37, -31, -41, 12, -26, -5, 2, 7, -3, -18, -22, 26, -6, 37, 30, -29, 11, 17, 0, -21, 35, 3, 20, 45, -31, -16, -42, -15, 31, -11, -17, -34, 4, -1, -9, -30, 28, 18, 23, -38, 39, 36, 17, 26, 7, 1, 20, -35, 20, -39, -30, 30, 6, -13, 19, 18, 5, 32, -21, 13, 15, 3, 10, 12, -19, 25, 18, 31, 2, 0, -33, 32, 2, -40, 27, -14, -38, 32, 5, -5, -11, 31, 21, 11, -22, 19, -13, -14, -4, 18, 30, 34, 
  5, -8, 5, 13, 9, 18, 36, -30, -18, -24, 2, 26, -30, 2, -16, 41, -39, -25, 13, -33, -36, 21, 11, -13, -27, -32, -39, 13, 11, 18, -10, -3, 32, 16, -33, 41, 25, -4, -31, -24, 15, -25, -49, -13, -25, -43, 1, 26, 3, -17, 16, -18, -33, -30, 29, 17, 31, -35, 17, 10, 16, -16, 6, 27, 5, -13, 40, 33, -4, -15, 26, -3, 7, 26, 41, -27, -11, -20, -11, 14, 21, 0, 24, 12, 0, 9, 7, 44, 36, 14, 33, -29, -39, -38, 34, -22, 26, 31, 0, 26, 28, 17, -8, -32, 30, 31, -37, -42, -21, 27, 28, 6, 18, -3, 42, -9, -21, -17, 9, 6, -22, 4, -33, 10, -42, 23, -26, -9, 39, 24, -23, 19, 3, -35, 40, 10, -17, 26, -6, -5, 14, 25, -14, 0, -9, -47, 34, -30, 17, -11, 30, -1, -1, -36, -23, -13, -52, 21, -35, -2, -42, -50, -41, -8, -21, 24, 14, -29, -28, -42, -26, -27, 3, -36, 25, -25, -22, -31, 21, -3, -6, 23, 10, -13, -3, 16, -37, 2, -30, 42, 13, 2, 
  -38, -14, 36, 56, -25, 30, 27, 7, -40, -13, 18, 64, -7, 37, -24, -3, 35, -66, 20, 27, -11, -31, 14, -38, 2, -13, -12, -14, 42, 10, 14, -19, -44, -20, 22, 42, 47, -24, 44, -36, -13, 22, 35, -29, -14, 46, -18, 26, -6, -39, -30, -29, 28, 39, -24, 13, 47, -20, -37, -32, 29, -26, -36, 7, 36, 11, 37, 82, -5, -22, 8, 1, 16, 13, -2, -23, 10, 24, -14, 21, -21, -10, 28, 58, 0, 40, -3, -38, 29, 48, -4, -72, 31, 21, 35, 31, -13, 33, 3, 57, 21, 36, -16, -17, 28, 16, -17, -42, 23, 10, -28, -14, -7, 7, -41, 42, 7, -27, 56, 34, 25, -33, 24, -35, -5, 30, -31, 35, 8, 5, 30, 56, 14, -22, -34, 31, -36, -19, -53, -27, -13, -3, -41, 50, -21, -49, -38, 17, -2, -16, -39, 32, 19, -36, -66, -32, -14, -10, -5, 63, 13, 28, -33, -23, 2, 2, -24, 24, -35, 16, -5, -24, 13, -13, 16, -31, -28, -22, -41, 30, -34, 9, 0, -7, 8, 37, 25, -24, 29, -23, 43, 28, 
  6, 27, -15, -67, -45, -22, 4, -33, 14, -45, -3, -6, 20, -35, 31, 17, 14, 6, 15, -35, 18, 6, 43, 23, 6, -31, 11, 52, -30, -7, 13, 11, -57, 14, -1, -55, 8, -8, -18, 42, 2, 28, 17, -39, -28, -7, 0, -22, 32, -13, -8, -22, 26, 26, -11, 4, 21, 17, -25, 36, 6, -55, 17, 40, 43, 30, -12, -69, 16, -12, -17, -28, 43, 29, -20, -29, 49, -24, 21, -32, 39, 47, -33, -65, 1, 5, -36, -24, 27, -28, 24, -3, 44, -17, 1, -12, 1, -14, 10, -57, -27, 15, -42, 14, -36, 1, 37, -79, -29, 14, 10, -29, 19, 12, -34, -20, 20, -54, -27, -20, -7, -20, -5, 38, 44, -33, -25, -19, -8, 13, -13, -23, -1, 15, -18, -1, 1, 26, -37, 26, -27, 15, 20, -117, 12, 23, -15, -29, -9, 41, -18, 13, -1, 20, 56, -8, -21, 25, 33, -5, 18, 42, -10, 13, 36, 27, 36, 12, 26, -5, 51, 1, -10, -42, 8, 18, 0, 25, 16, 19, 10, 10, 29, -4, -15, 13, 20, -17, -12, 14, 19, -22, 
  22, 11, -8, 30, 30, 2, 26, -36, 18, 11, -50, 21, 12, 11, 47, 65, -41, -24, -24, -18, -31, -10, 11, -36, -18, -31, -28, 17, 10, 23, -18, -19, -21, 23, -45, -3, -33, -9, -46, -3, -36, -48, -45, 30, 35, -22, 47, 27, 34, 21, 3, 35, -13, 18, 35, 40, -66, 3, -2, 20, 13, -3, 46, -17, -26, -8, -10, -19, -23, 16, 39, -33, 41, -35, 28, 32, 32, 0, -3, 50, 44, -13, -42, 13, 8, 27, 38, -19, -4, 39, 22, -12, 18, -22, -5, -19, 34, 39, -22, 8, 34, 17, -15, 13, -4, -37, 38, 0, -33, 24, -39, 16, -15, -31, -5, 14, -22, -25, -2, -4, -39, 40, -23, -35, -36, -24, -23, 7, -4, 42, 36, -13, -34, -42, 18, 43, 16, -20, -6, 5, 13, -5, 56, 42, 26, 19, -9, 19, 27, -12, -17, -42, -29, -41, 3, 25, -15, 0, 35, -9, 39, 22, -32, 9, -41, 29, 10, -43, -8, 8, 12, 63, -41, -16, -11, -4, 36, 10, 6, 12, -4, -23, -39, 11, -20, -2, -18, 27, -42, -25, -27, 21, 
  10, 5, 12, -38, -4, -2, 46, 34, 0, -31, -19, 22, -34, 2, 13, -28, 5, -33, 24, -38, -38, 2, 29, 27, -24, -36, 2, 29, -30, -16, 9, -16, 41, 12, -35, 11, 10, -6, -20, 18, 5, -37, 33, -38, -53, 21, -31, 35, 23, -58, -24, 4, 23, 36, -30, 8, -51, 10, 10, 10, -38, 17, 0, 12, -5, -14, 23, -25, 43, -20, 0, 6, 4, 58, -49, 14, 16, -32, -11, -12, 4, 14, -13, -36, -18, 7, -4, -34, 35, 1, 42, 6, 6, -38, 16, -39, 24, -16, 5, 6, -15, 13, -1, 6, 25, -10, -18, -14, 6, -5, 18, -7, 12, 52, -33, -6, -40, -38, -31, -7, -9, -44, 31, 63, 32, -8, -2, 7, 31, 29, 3, -71, -8, -29, 43, 25, 39, 5, -5, -40, 30, 8, 31, -86, -14, 74, 27, -17, -11, -33, -15, -14, -16, -10, -8, -3, 20, 24, 66, -32, -15, -16, 55, -5, 38, 11, -15, -23, 23, 43, 20, -40, -3, -18, 43, -13, 9, 9, -23, -28, -28, 4, 29, 29, 0, 24, 38, 15, 15, -32, -8, -6, 
  -32, -41, -35, -42, 25, 20, 25, -12, 44, -5, -5, 6, -12, 4, -28, -52, -19, 9, 6, -107, -15, 33, 45, -4, 14, -40, -16, -21, -15, 1, 18, 34, 22, 28, -24, -46, 9, 19, 36, 36, -12, 12, 40, -14, 2, -12, 25, -19, -39, -8, 34, -19, -29, 6, 4, -31, -10, 15, 4, 37, 18, -11, 12, -33, -24, -7, 32, -29, 32, 29, -23, 14, -6, 33, -41, 8, -30, -2, 36, 9, -19, 20, -15, -66, 1, 37, -20, -25, -18, -4, 39, -23, 35, 8, 41, 16, 19, -43, 22, 27, -8, 17, -1, 18, -2, 13, 4, -54, 28, -40, -4, 33, 40, 35, 14, 35, -32, -27, -5, -20, 9, -25, -40, -11, 22, -4, -44, 7, -38, -17, -33, -47, 35, -19, -13, -26, -36, 12, 23, -45, -29, -18, 12, -30, 10, 56, 36, 16, 16, 24, 0, 16, 33, 35, 9, -68, 33, -19, 50, -11, 21, -20, -8, -51, 34, 3, 23, -34, -42, 18, -30, -34, -11, -23, -29, 21, 8, -31, -6, -15, 2, 19, 5, -9, -16, 4, -48, 8, -19, -2, 41, -30, 
  37, -13, -16, 31, 43, -7, -13, -28, -36, -12, 25, -17, -10, 24, -15, 28, 6, 44, -41, 39, -11, -25, 15, -3, 13, 4, 44, 8, -25, -11, 29, 36, -8, -35, 13, 12, -3, -20, 8, 23, -27, -45, -5, -3, 2, -33, -20, 31, -28, 7, -40, -26, 16, -17, -30, -8, 18, 42, -18, -31, 5, -4, -12, 12, -4, 33, 24, 31, -26, 12, -34, -2, 8, -16, 24, -10, 40, -4, -27, -19, 21, 31, -42, -4, -11, -38, 6, 10, -39, 17, 7, 19, -31, -25, 29, -41, 36, -18, 18, -19, -15, 42, -30, -42, -36, 24, 48, -25, -21, 31, 7, -34, 26, -32, -40, -2, 43, -3, 41, 22, 32, 26, -37, 25, 15, 35, -10, -26, 19, -15, 36, -1, 40, 44, -28, -14, -13, -15, -29, 10, -23, 1, 40, -38, -22, 20, 36, 39, 6, -10, -27, 10, 9, 8, 25, -3, 4, 9, -6, -9, -16, 11, -29, -28, 2, -36, 17, 8, -7, -4, 2, -35, 29, -24, -10, 19, -32, -36, 11, 11, 26, 25, 35, 9, -22, 20, -34, -34, -43, -19, -39, 3, 
  27, 17, -25, 33, 39, -37, -55, 16, -24, -19, 37, 8, -16, 34, -18, -34, 21, -28, 29, -8, 9, -2, -76, 0, 19, 1, -65, -36, -12, 12, -27, 47, -39, 35, 8, 27, 3, -6, 12, -7, 42, -23, -27, 11, -11, -20, 8, 20, -33, -10, -39, -20, 16, 12, 22, -9, -13, 14, -25, -51, 50, 29, 15, 32, 3, -28, 37, 30, 22, -24, 20, -36, -27, -19, 16, 19, 37, 5, -36, 32, -12, 19, -16, 14, 21, -22, -13, 13, -28, -8, -46, -22, -40, -4, -59, 50, -46, 15, 2, 56, -2, 1, 16, 24, 14, 44, 7, 27, -22, -26, 28, -24, -38, -29, 9, -9, -21, 3, 8, 34, -32, 39, 3, -2, 42, 44, -43, 12, 40, -35, 36, 6, -38, 20, -31, -29, -55, -46, -38, 41, -29, 36, -39, 92, 20, -56, 11, 86, 21, -21, 20, -10, -20, -22, -30, -24, -22, 32, -63, 77, -28, 1, -1, 11, -44, -13, -5, 19, -34, 31, -5, 12, 15, 12, -46, -27, -29, -30, 24, 24, 22, -8, 1, -40, -16, -19, 36, 11, 35, -1, -41, -35, 
  7, 5, 39, 3, 3, -37, -51, -28, -20, 20, -16, -18, 45, 16, -23, 43, 8, 48, 27, 0, 36, 18, -24, 0, -30, 24, -34, -22, -27, 5, -48, -4, 10, 18, -31, 18, 3, 11, -43, 33, 36, 16, -28, 33, 9, -21, -33, 12, 13, -42, -19, 27, 32, -33, 13, 3, 39, 3, -15, -29, 43, -28, 19, 10, -18, -37, 14, 18, -31, -15, -23, -21, -24, 1, 30, 44, -38, -10, -33, 70, 11, -22, -42, 21, -23, 17, 21, -1, -35, -46, 49, 8, -77, 12, 20, 23, -13, -15, 39, 39, -20, 22, -35, 17, 11, 26, -46, -18, -68, 36, 20, -29, -23, 5, 39, 14, -37, 36, 10, 19, 38, -10, 3, -48, 16, -12, 20, -13, -24, -30, 30, -12, -16, -33, -51, -26, -31, 14, 2, 57, -12, -28, 21, 2, -7, -6, 12, 4, -21, 18, -24, -6, -50, -50, 37, 93, -67, -26, -9, -31, 5, -31, 10, -19, -8, 36, 41, 35, -35, 11, 33, -2, -21, -30, -3, -39, 35, 4, 11, 20, 25, 25, 39, 30, -12, 13, -3, -40, -18, 5, 36, 31, 
  39, -28, 10, 72, 34, -41, -26, 42, 12, 20, 24, -15, 9, 32, -38, 31, -31, 10, -39, 42, 34, 37, -10, -11, 3, 12, 16, -12, 18, -7, 4, 14, 3, 29, -12, -11, 21, -15, 42, 32, -9, 47, 24, 17, 12, -4, -16, 7, -19, 22, -24, -13, -9, 4, -44, 17, -19, -26, -15, -7, 32, -19, -20, -19, 36, 25, 23, 93, -33, -6, -33, 33, 15, -28, 9, -29, -49, 5, -42, 39, -24, -53, -27, 88, -34, -36, 2, 1, -12, 6, -46, -3, 16, -6, 16, 54, 39, -46, 41, -19, 39, 1, 9, -24, -13, 45, 0, -24, 45, 18, -5, 13, -11, 11, 19, 34, 0, -12, 20, 17, -19, 7, 38, -5, 28, 21, -35, -32, -25, -32, -25, 24, 42, -45, 31, -15, -5, -15, -10, 49, -53, 27, 19, 59, -23, -67, 9, 127, -4, 1, 22, 28, -4, 19, 11, -42, 4, -2, 12, 71, 45, 3, -27, 0, 27, -37, -21, 2, -10, -28, 2, -24, 27, -9, 38, 20, 34, -29, -38, 6, 24, -4, 6, -1, 10, 30, 43, -3, 22, 36, 17, -27, 
  25, 27, -13, 36, 36, 19, -22, 26, -30, 15, -3, 17, 32, -23, -29, -25, 2, 41, -36, -28, 9, -22, -31, 25, 16, -37, 18, -3, -31, -41, -41, 39, 15, -40, -20, 17, 13, 7, -28, -22, 2, -6, 15, 36, 14, -9, 20, -32, 12, -26, 36, 9, -35, 22, 12, -22, -38, -21, -3, -22, -28, -5, 26, -29, -24, -37, -43, -14, 1, 14, -20, -23, -40, -19, -39, -12, -10, -42, -4, -23, 41, -7, 34, 6, -6, -40, 1, -13, 8, -22, 12, 16, -16, 25, -29, -30, -13, -22, 6, -28, 10, -27, -13, 31, -13, -40, 8, -30, 2, 7, 34, 26, -3, 30, -21, -22, 35, 39, -11, -29, 9, -8, 26, 43, 26, 2, -5, 3, -9, -7, 25, -15, 1, 27, 25, -41, -29, 29, 27, -5, 18, -12, 16, 31, -16, -43, -15, -29, -30, 25, 27, 11, -32, -42, 41, 2, -7, -10, -29, -20, 14, -28, 22, -42, -33, 3, -24, 17, 11, 40, -24, -38, 27, -27, -41, -6, 11, -30, -18, -9, -37, -37, 13, 35, -40, 35, 20, -16, -19, -29, -6, -1, 
  64, -14, 40, -78, -46, -18, -42, 1, 44, -14, -19, 13, -3, 20, 51, 65, 25, 19, 30, 3, 37, 18, -59, -28, 0, -38, 59, 56, -66, 0, -5, -2, 16, -17, -15, -5, -18, -43, -15, -20, 43, 18, -16, 19, -17, -26, -32, -23, -39, -41, -19, -17, 8, -7, 2, -33, -34, 12, -21, 10, 14, -31, 24, -21, 2, -15, -14, -86, 9, -31, -27, -16, 37, 0, -3, 19, 44, -34, -27, 30, 72, 42, -26, -95, 11, -38, -41, -18, 15, -24, 21, 72, -69, -40, 0, -31, -18, -5, 33, -44, -7, 38, -10, -18, -12, 28, -18, -18, -4, 25, -8, -20, -31, -13, 28, -6, 32, -11, -26, -41, 57, -52, -10, -30, -35, 2, 43, 19, 26, 44, 24, -41, 36, -10, 10, -12, -1, 20, -27, 63, 42, -5, 50, -67, 11, 45, 2, -67, -12, 14, 41, -25, -47, -20, 15, 78, 1, -22, -40, -68, 42, 7, -28, -18, 36, 2, 0, 33, -37, -13, 33, 50, -22, 6, -3, -9, 29, -38, 26, 40, -39, 10, -11, -2, -29, -6, -35, -29, 38, -3, 14, -18, 
  40, 37, 14, 85, 3, 37, -17, 34, -30, -42, 1, -13, -8, 38, -8, -7, -44, -18, -38, 45, 38, -15, -62, -34, 11, -12, -8, -43, 49, -2, -48, 30, -23, 33, -3, -25, -14, -23, -41, 39, -3, 7, -44, -34, 39, 39, -18, -35, 15, -10, -6, -9, 27, -5, 11, -18, -3, -13, 14, 16, -14, 44, -48, 19, -34, 9, 27, 63, 22, -24, -43, 18, -63, -54, -31, 4, 26, 19, -56, 14, -23, -12, -27, 24, -10, 38, -42, -41, -16, 48, -34, -60, -31, -36, 16, -10, -42, 11, 24, 6, 25, -22, -24, 22, 20, 28, -21, 31, -20, -6, 10, -1, -42, -5, 20, -32, -27, -10, -7, -38, 30, 45, 5, -18, 29, -30, 37, -10, 20, -23, -36, 72, 23, -19, -57, 14, -53, 16, 12, -14, 2, -19, -15, 109, 26, -58, -26, -31, 40, -24, -38, 22, 10, -37, -12, -15, -14, 5, -47, 56, 17, -48, -21, 42, 37, -19, 9, 46, 20, -5, 3, 24, -13, -8, -14, -16, -5, -43, 3, 17, 20, 55, 24, -24, -23, -31, -13, 12, 25, 35, 16, 37, 
  -8, -12, 41, 8, -6, 22, -34, -34, -1, -25, -51, -25, -12, -35, -13, -1, -27, -16, 45, 49, 23, -31, 36, 0, -13, -13, -3, -40, 33, -35, -7, 32, 67, -18, 5, -31, -22, -12, 23, 28, 4, -65, -17, 30, 4, 37, 8, 4, -28, 20, -35, 15, 25, -28, -18, -22, 27, -37, -16, 28, 2, -18, -44, -34, 23, 18, 34, 16, 21, -25, 41, -39, 34, -33, 11, 0, 17, 11, -32, -17, -4, 22, -41, 25, -10, 14, 24, 17, 44, 21, 19, -24, 24, -20, 31, 26, 34, 45, -32, -1, -27, -4, -36, 36, 4, -47, -10, -2, 47, -7, -19, 2, 44, -4, 22, 36, -34, 2, 0, -14, 21, -15, 22, -18, -17, 17, 22, 27, -31, -1, -13, 8, -44, 39, -11, 22, -3, 37, 27, 12, -16, 22, 31, -14, 2, 15, -37, 18, 2, 40, -2, -34, 16, -22, 14, 12, 56, 33, 18, -47, -7, 35, -26, 24, 42, -32, -5, 25, -4, 4, 1, 28, 58, 23, -20, 41, 0, -4, 40, 37, 5, 22, 28, 13, 29, 22, -14, -15, -31, -29, 16, 22, 
  3, 9, -2, 50, 1, -8, 18, -33, -37, -13, -1, 8, -62, -5, 24, 16, 4, -35, 9, 25, 28, -18, 43, -12, 18, 26, -19, -35, 1, 19, 24, 25, 32, -38, 20, -20, 5, -43, 43, 37, -9, -13, -7, 23, -34, 7, 43, -4, -35, 47, -37, 32, -7, 6, 11, -26, -41, 16, 5, -7, -40, 1, 22, -35, 15, 12, 15, 13, 39, 20, -2, 12, 39, -30, 26, 4, 0, 24, 21, -43, 42, -22, 9, -43, -18, -25, -22, 18, -29, -15, 28, -33, -17, -23, 26, 22, -25, 11, -13, -42, -34, -5, -59, 10, -5, -62, 8, 47, 3, 28, -42, 32, 4, 42, 31, 20, 39, -38, 26, 12, -36, -16, -27, -5, -38, -37, -48, -19, -21, 43, 26, -4, -1, 6, 34, 17, -11, -25, -13, 39, 4, 37, -35, 17, 37, 15, 13, -27, -15, 24, 15, -32, -19, -25, 37, 36, 57, 5, 40, 34, 20, 43, -31, -37, 7, -18, -16, 10, 34, 20, 16, 40, 66, -22, 34, -16, 12, 35, 47, -37, 32, -47, 28, -41, 30, -32, 27, -22, -48, -19, 21, 13, 
  7, 11, 6, -76, -5, 20, -17, -21, 20, 27, -3, -28, -3, -54, 7, 60, 42, -28, 35, -47, 1, -6, 5, 28, 29, -13, 15, 4, 18, 22, -1, -53, 26, 17, 11, -13, 17, -10, 33, -31, -40, -27, 31, -7, -40, 5, 34, 35, 7, -9, -10, -33, 42, 19, 23, -5, 16, -1, -8, -5, -32, -26, -24, 28, -9, 33, 22, -54, 22, -24, 38, -36, 1, -19, -27, 8, 40, 17, 18, -33, 11, -20, 19, -2, 6, 19, 0, -27, 34, -30, 39, 28, 38, 8, 43, 18, 31, 23, 29, -45, 34, -30, 24, 24, 14, -23, -5, -18, 35, -47, 36, -25, -18, -11, -11, -29, 31, -45, -29, 22, -1, 14, 36, 60, -34, 8, 10, 0, -19, 37, 10, -90, 8, 29, -23, -9, 18, -2, 22, 17, 64, -24, 21, -40, 3, 44, 32, -64, 36, -33, 12, -35, 9, -8, 67, 2, 44, -41, 19, -63, -15, -10, 18, 28, 9, -9, 30, 3, 30, 13, -1, 51, 36, -14, 14, 29, -4, 44, 27, -32, 20, 15, -46, -18, 22, 24, -39, 1, -27, -20, -34, -9, 
  -30, -13, -21, 1, -17, -24, -26, -16, 24, -39, 39, 17, 30, 7, -10, 53, -1, 34, -27, 25, 23, 37, 28, -27, 33, 6, 24, 36, 10, -37, 32, -9, -3, 29, 6, -30, 27, 17, -3, -25, -21, -51, 9, -6, 35, 33, -40, 16, 32, -38, 30, 18, 21, -14, -33, 26, 6, 32, -39, -4, 1, -3, -34, 10, 16, 15, -44, 5, -8, -30, 38, -30, -26, 19, -11, 30, 28, -10, -36, 26, 48, -32, -1, -36, 15, 40, 49, 35, 40, -9, -4, 40, -40, 9, -33, -6, -28, -26, 7, -5, -21, 21, 27, 16, 30, -59, -6, 15, 5, -14, 39, -26, -11, 21, 26, 28, 8, -1, 34, 26, 32, -24, -24, -3, 12, 39, 5, -1, -24, 1, -37, -36, 26, 36, 21, -9, 15, -1, 13, -18, -17, 2, -4, -11, 17, 14, 6, 26, -19, -12, -8, 32, 14, -15, 38, 21, 37, -3, 9, 12, 32, 29, -44, 6, -5, 10, 22, -30, 9, 22, -6, 50, 25, -5, -45, -23, -29, 22, 28, 4, -3, 12, 23, -41, -44, -20, -18, 16, 32, 12, 32, 12, 
  -51, -21, -25, -47, 33, -7, 46, -19, 3, 0, -25, -29, -17, 30, 18, -4, -28, -11, 3, -79, 34, 39, 4, -17, 3, 25, 44, 17, -34, -26, 14, -44, 26, 7, 36, 12, 21, 33, 9, -12, 50, -3, -7, 15, -47, -29, -35, -50, 22, -27, 2, -11, -27, 10, -12, 9, 13, -48, 33, -16, -21, -24, -25, 19, 25, -15, 20, 4, -39, 6, 18, 2, 33, 20, 0, 17, 43, 40, 46, -16, -4, 2, -21, -53, 28, 10, -32, 44, 20, -6, -21, 55, -20, 19, 39, -49, -1, -34, 20, -4, -13, 39, 31, 7, 19, -5, 2, -31, 35, -27, -30, 3, 5, -25, -2, -39, -40, -24, -21, -38, -1, 10, -45, 27, -28, 15, -1, 10, 15, 10, 41, -39, -30, 2, 42, 23, 27, 17, -16, -31, -19, -40, -32, -14, 17, 22, 28, -4, -19, -35, 2, -22, 20, 46, -31, -9, 37, 17, 42, -18, 13, -12, 19, -22, -1, -10, -28, -24, 16, -1, 11, 2, 4, -27, 19, -5, 30, 7, 25, -20, -3, -30, 5, -4, -20, 16, 20, 17, 48, 9, -24, 20, 
  -44, 17, -13, 10, 29, 37, 23, -4, 24, -8, -37, -3, -55, 19, -26, -3, -27, -18, 54, 43, -23, -18, 3, 3, 19, 23, 3, -53, 56, -6, 40, 37, 53, -6, -11, 19, -15, 19, -9, 28, -27, -36, -10, 56, -17, -20, 41, 19, -20, 67, 35, 8, 9, -7, -21, -31, -23, -22, 51, 35, -53, -32, -14, -17, 17, 29, 1, -2, -19, -1, -19, -31, 11, 4, 5, 44, -4, -46, -20, 1, 41, 40, -32, 40, -17, 4, 26, 10, 18, 32, 6, -52, 21, 18, 16, 7, 6, 4, -8, -46, 11, -27, -22, 18, -40, -60, -8, 42, 51, 29, 12, -39, 16, 11, 7, 28, -55, -2, -57, 13, 24, -27, 49, -4, -42, 10, -61, -40, 21, 54, -3, -32, -33, -7, 19, 4, 36, -13, 25, -36, 49, -7, -36, 19, 10, -15, 30, 15, 19, 32, 40, 12, 36, -20, 27, -25, 6, -34, 49, -13, 45, 47, -9, -39, 10, -14, -19, -10, -4, -11, 7, 18, 20, -26, 28, 30, 7, 29, -17, -31, -46, -1, -29, -41, -12, 1, -26, 25, 23, -7, -4, 33, 
  14, -37, -6, 27, -13, -41, 6, -9, 39, -10, 13, -17, 0, -41, 31, 13, -1, 2, 2, -2, -18, -44, -28, -1, -28, -9, -25, 20, 35, -6, -14, -20, 27, -24, -6, 31, -17, -28, -17, -37, 16, -31, 33, 13, 19, -1, -4, -13, 33, 30, 9, -5, 36, 38, -26, 0, -18, -39, 5, 13, -29, -13, 2, 1, -20, -26, -27, 16, -15, -19, -32, 1, 23, -19, -33, -16, 26, -43, 26, 13, 9, -45, -30, 6, -10, 15, 16, 4, -48, 23, 19, 13, -33, -27, 23, 20, -43, -33, -23, -3, 32, 29, -15, -43, 19, -18, -38, -29, -14, -27, 40, 9, -5, -31, -42, 18, 27, 3, 41, -26, -34, -7, 25, 14, 36, -31, -14, -27, -28, -31, -39, -37, 23, 4, 30, -4, -4, -39, 16, -18, 8, -17, 2, -12, -41, -33, -34, -9, -34, 14, 38, -2, -33, 31, 36, -17, -17, 12, 11, -25, 30, 4, 11, 9, -25, 5, 24, 17, -3, -15, -14, 25, 21, -16, -11, -19, -32, -28, 30, -12, -24, -41, 14, 8, 26, -19, 5, 10, -19, 35, -22, -34, 
  42, -39, 25, -6, -42, -42, -32, 32, -8, 34, -3, -10, 21, 4, 31, -17, -13, 16, 8, 22, -28, -11, -21, -18, -11, -20, -26, -23, -6, 13, -43, -34, -21, -11, -2, -47, -9, -22, -37, 25, 10, 16, 34, -4, 22, -36, 23, -39, 6, 25, -16, 42, 36, 26, 12, -31, 34, 37, 26, -12, 32, -10, -11, 11, -9, 21, 7, 13, -6, -3, 34, -21, -13, -39, 17, 24, -14, 11, 4, 32, 39, -36, 23, -12, -39, -37, -1, 15, 1, 2, 15, 5, -31, 37, -7, 33, 16, -43, 39, 12, 11, -2, -3, 21, 11, -32, -33, -25, -38, 30, 12, -12, 17, 4, -36, 7, -12, -6, -42, -34, 34, 35, 4, -40, 16, 15, 34, 39, -4, 5, 26, 35, 5, 7, 18, -30, -28, 5, -29, 38, -12, -45, 36, 55, 22, -40, 39, 22, 31, -39, -32, 3, 1, 8, -4, 35, -12, 41, 22, -20, 35, 34, -35, 17, 42, -37, 17, -4, -44, 6, -18, -30, -25, -25, -42, -37, -23, 21, -11, 37, -20, -23, 33, -5, 22, -21, -13, -38, 15, 18, 25, -20, 
  22, 18, -20, 73, 14, 27, 9, 9, -20, 35, 30, -25, -7, -31, 8, -40, 18, 24, 12, 60, 21, 21, -32, -41, 25, -6, 1, -25, -18, -35, -40, -22, 1, -19, -38, -13, -4, 0, 0, 29, 28, 51, -18, -41, -35, -21, -13, -7, 24, -15, -13, 24, -40, -13, 42, -10, 27, -36, 32, -36, 36, -2, 1, 44, -16, -15, 34, 83, 38, 31, -22, -29, 41, -40, 21, 10, 5, 38, -34, -5, -5, 19, -14, 1, 40, -35, 28, 10, 36, 26, 1, -16, -25, 2, -23, 10, 15, -11, 19, 41, 14, -36, -16, 2, -6, 54, 5, -30, 23, 7, 6, 9, -27, -1, -41, -42, -35, 33, 14, 33, 28, -6, -6, 14, 49, 19, -32, -27, -15, -19, 9, 9, 8, -29, 25, -45, -22, -27, 9, -5, 21, 9, -9, 47, 13, -8, 7, -16, -10, -40, 23, 28, 11, -9, -2, -17, 6, 40, -27, 23, 3, 4, 3, 6, 2, 24, 32, 11, 7, 49, 31, 5, -44, 14, -3, 21, 2, -5, -16, -20, -35, 23, -17, -8, 36, 33, 19, -12, 21, 4, 18, 20, 
  -55, -20, -42, -47, 22, -19, 37, -37, 16, 8, -25, -29, -25, -37, -19, -18, 30, -43, -30, -32, -26, -3, 26, 19, 41, 2, 36, -37, 11, 30, 31, 43, -22, -36, -11, -14, -8, 7, -29, -32, -7, 20, 38, -6, -34, 30, -30, 17, -31, 4, 28, 18, 9, -34, 35, 46, -39, 0, 15, 34, -28, -24, -7, -5, 29, 32, -23, -56, 23, 32, 13, -44, -20, -7, -10, 15, 30, 20, 12, -12, -3, 27, 37, -51, -7, -29, -43, -30, -20, 16, -11, -11, 31, 32, 30, -61, 33, 10, 31, -63, -29, 37, -2, -8, 31, 2, 29, -6, 24, 29, 23, -25, 20, 15, 37, 15, -29, -33, -20, -38, -27, -7, 15, 63, 37, 14, -24, -32, -10, -29, 6, -7, 23, 23, 54, -24, -37, 43, -17, -53, 9, -20, 11, -40, -43, 20, -8, 16, -29, -15, 28, 36, 23, 28, 29, -31, 21, -5, -26, 11, 25, 48, 17, -31, -24, -11, -25, 22, 39, -5, -18, 27, 58, 13, 22, 35, 23, 31, -6, 33, 22, 0, 9, 21, 6, 38, -24, 18, -36, -17, -5, 46, 
  25, 26, 15, -38, -1, -3, 14, 22, -5, 9, 8, -35, -33, -28, -19, 17, 26, 0, -24, 1, -34, 22, -45, 12, 35, -21, 28, 28, -6, 12, -5, 43, -11, -35, -44, -15, -37, 15, -44, 18, -44, -8, 30, -39, -29, 27, -37, 4, 5, 6, 21, -6, -23, -1, -18, -6, -8, -6, -10, 19, -29, 32, -14, 8, 36, -37, 39, -23, -15, 31, -19, 31, 21, 29, 9, -4, -9, 13, -38, -14, 34, -25, -24, 15, -4, -42, -14, -1, -10, 21, -1, 26, -13, 24, -16, 21, -36, 8, 21, -26, -21, 9, 16, -3, 4, -26, 0, 33, -10, -25, -31, -31, 19, -43, -9, -24, 29, -9, -33, -37, 2, -13, -29, -30, -34, 33, -11, -38, -5, -4, -3, -34, -33, -24, -44, 10, 0, 29, -23, -8, 22, -11, -38, -15, 10, -12, 12, 18, 15, 25, -13, -26, 37, -27, -12, -5, 27, -8, -26, 33, -22, -41, -35, -23, -21, 7, 21, -2, 34, -22, -14, -5, -36, -1, 36, -27, 2, 2, 25, 38, 19, -23, -32, 37, 4, -10, -29, -16, -28, 14, -16, 14, 
  -5, 33, 31, -15, 29, -41, -36, 14, 31, -30, 36, -43, 37, 13, -7, -31, 14, -30, -3, -22, 9, 16, 37, 9, 28, 19, -25, -14, 42, -27, -24, -41, 1, -36, 37, -14, -35, 11, 19, 11, -2, -21, 37, -28, 44, 17, 27, 25, 2, -40, 8, 4, -2, -15, 32, -3, 23, 27, 2, -16, -16, 19, 16, 2, -33, -21, 34, 17, -38, -33, -41, -3, 38, 2, -38, -19, 40, 21, -9, 6, -27, -4, 21, -32, 21, 29, -15, -41, -5, -3, 24, -33, 10, 36, 11, 4, 11, -43, -32, 33, 11, -27, 29, -24, -18, -44, 37, 28, -10, -6, 2, -37, 22, 23, 36, 24, -32, -26, 21, -30, 0, -5, 39, -35, 15, 4, -25, 21, -5, -28, -3, 1, 28, -4, -4, -2, -30, -1, 25, -2, -10, 14, -3, -11, -25, -23, -4, 2, -31, 1, -23, 7, 9, -25, -16, -36, -30, -44, 35, 16, -7, 11, 18, 9, -7, -11, -39, 7, -31, -7, -36, -20, 22, 14, -4, 2, -17, 4, 24, -43, -30, 26, -15, -2, -16, 27, -37, -7, -31, 32, 4, 6, 
  -24, 11, 34, -6, -13, 32, 9, -37, -38, -44, -32, 39, -8, 2, -32, 12, 37, 2, -33, -38, -40, 34, -6, -26, -31, 14, 6, -6, 30, 31, -1, -14, 17, 35, 5, -21, -29, 10, 13, 11, 14, -17, -22, -45, -34, -15, -6, -11, -18, 1, -11, -29, -27, -12, -15, 5, 8, 6, 22, 40, 23, 27, -36, 20, 29, 37, 12, 2, -10, -33, 25, 42, -24, 10, -46, -8, -18, -29, 36, -6, -28, 4, -11, 34, 23, 8, -4, 21, -7, -7, 29, -35, -43, 10, 28, 24, 30, -7, -21, 35, -25, 9, -25, 23, -31, 8, -43, -32, -15, -24, 10, 7, -19, -37, 37, -38, 10, 25, 2, 11, 6, 3, -27, 19, -17, -27, -24, 14, 25, 22, 12, -27, -25, 17, -2, -17, 9, -23, 7, 32, -23, -30, 11, -5, 37, -4, -33, 24, -24, -1, 27, 28, -18, 17, 26, 26, 33, 17, -7, 1, 1, -42, -31, -39, 3, -34, 39, 29, -25, -44, 4, 12, 25, 14, -9, -19, -11, -4, 38, 10, 22, 33, 16, 36, -34, -30, -2, -28, 26, -5, -39, -33, 
  -42, -24, 38, -21, 31, 18, -16, 14, 46, 22, -39, -37, -38, -8, -17, 6, -45, 6, -20, -47, -4, -28, 37, -29, -19, -28, -43, -14, 29, 26, 3, -62, 40, 12, -45, -67, -8, 1, 8, 3, -43, -62, 28, 40, -33, -32, -20, -33, -25, 13, 35, 5, -17, -1, 7, 23, 9, 33, -26, -35, 15, 22, -4, 25, 10, 0, -24, -44, 24, 6, -22, -18, 36, 29, 43, -45, 3, -36, 29, 18, -11, -34, -6, 24, 35, -38, -34, -13, 13, 42, 8, -24, 32, -38, -27, 31, 12, 42, 18, -49, 5, -20, -6, 41, 33, -1, 28, 52, -2, 2, 44, -36, -1, 32, -41, 27, 18, 4, 16, 6, 3, -17, 46, -3, -6, -43, -33, 24, -25, 0, -44, 20, -5, 19, 25, -14, 10, -20, -24, -31, -12, 18, 9, -58, -21, -31, -27, -31, -1, -22, -25, 9, -34, -20, 19, 9, -13, 14, -6, -10, -24, 24, 10, -29, -38, -26, -18, 16, 0, -24, 31, -47, 61, 27, -1, -25, 31, 18, -22, 2, -2, 38, 32, -5, 8, 38, 30, 45, -51, 27, -9, 29, 
  12, -3, -40, 42, 32, 1, 10, 8, 4, 40, 34, -3, 49, 35, -44, -18, -42, -19, -33, 99, -29, -22, 13, 21, 9, -35, 10, 8, 24, 1, -37, 26, -6, -25, -28, 31, 42, -29, -27, 18, 4, 1, -6, 30, -24, 36, 30, 15, -20, -30, 6, 24, -9, -4, -11, -19, 14, 47, 29, -1, 12, 7, -11, 30, -3, -8, 10, 52, 3, 19, -1, -10, -18, 26, 26, -40, -39, -28, 27, -11, 15, 14, -5, 27, 36, 1, -5, 26, 3, -4, -1, -51, 33, 19, -35, -26, 9, -5, 13, 59, -43, -15, 38, -11, 11, 26, -24, 39, 33, 25, -21, -25, -2, -12, 27, -32, -7, 31, 29, -22, 9, 30, 7, -20, -27, 21, 17, 35, -20, 27, 20, 52, -12, 23, 33, 19, -39, 40, 2, -30, -3, 30, 1, 117, -38, 0, -26, 19, -26, 5, 31, -4, -30, -37, 13, -34, -44, 1, -20, 60, 2, -40, -32, 33, 39, -4, -25, 19, 28, 40, 4, 35, 39, 27, 25, -28, -36, 6, 7, -20, -3, 14, 31, 6, -33, -39, -33, 12, -12, 21, -28, 29, 
  49, -3, -36, -62, 20, -17, 4, -32, -23, 30, -24, 9, -7, -28, -14, 45, 17, 40, 2, -78, -1, -37, 0, -36, 37, -63, 28, 68, 4, -17, 5, 4, -19, -3, -2, 3, -31, -27, -11, -24, 9, -15, 16, 11, 41, -29, -7, -17, 14, 33, -31, -14, 22, -5, 1, -28, 31, -28, -46, -25, -26, 19, 34, 6, 1, -24, -40, -114, 34, -10, 53, -10, 22, -22, -8, -7, 30, -18, 18, 66, 39, 36, -24, -67, -16, -33, -34, 17, 23, -9, 70, 19, -6, 3, 30, 28, 1, -13, -10, 9, -26, 36, -17, -26, -7, -30, -34, 20, -2, 28, 24, 42, -16, -18, 41, 12, -49, -6, -62, -27, -4, 19, 32, -20, 13, -35, 46, 15, 28, 54, -15, -55, 16, -40, -8, -22, 47, -48, 43, -1, -20, -48, 4, -54, -11, 13, -29, -68, -59, -40, -23, 18, -4, -42, 47, 87, 19, 22, 20, -63, 33, -30, 4, -15, 8, 34, -22, 17, -17, 28, -4, 22, 33, 12, -38, 28, 1, 20, -9, 4, -41, -46, -1, 35, 30, 34, -20, 3, 24, 9, -20, -23, 
  15, 29, 0, 23, -21, 13, -33, -39, 12, -41, 38, 18, 19, -32, -42, -34, -35, 35, -38, 9, 0, 19, 26, -22, -34, 19, -24, -8, -36, -41, -25, 1, 30, -17, 37, -31, 6, 32, 0, 28, 31, -5, -19, -41, -29, -34, -18, -39, -7, -26, 11, -31, 35, -14, -12, 33, 17, 5, -33, 22, -7, 14, -45, 6, 21, 22, 7, 28, -23, 33, 18, 26, -42, -46, -5, -22, -5, 22, -36, 19, -17, -20, -42, 20, -32, -28, -17, 40, -14, 14, -38, 33, 21, -11, 25, -42, -19, 33, -32, -7, 8, 27, 4, -20, 14, 33, 6, -28, 42, -37, 36, -28, -2, -13, -15, 1, 14, -18, -27, -30, -11, -19, -33, -17, -44, 36, -22, -8, 9, 33, -44, 25, -20, 39, 31, -7, -17, 13, -14, 3, -18, -10, 36, -14, -47, -19, 12, 23, 26, 15, -39, -23, -22, -32, 8, -11, -42, 32, 36, 2, 39, 35, -7, 31, -28, -4, 21, 35, -7, -39, -18, -41, -25, -2, -4, -36, -17, 34, -39, 2, 37, -41, -20, 18, -13, -28, -15, -23, -36, -4, 18, -39, 
  -34, -20, -22, -5, 6, 16, -30, -26, 4, 14, 11, -22, -15, -37, 1, 24, 4, 4, 9, -18, -12, 26, -15, 20, -4, 0, 22, -11, 26, 30, -7, -33, -36, 20, 9, -19, -39, 2, 32, 15, -25, -10, -29, -34, -35, -26, 18, 26, 25, -31, 2, -22, -29, -2, 33, 25, 22, -40, 17, 38, -9, -46, -20, -10, 43, -19, 38, -2, 31, -27, -40, -33, 9, 14, -12, -20, 35, 15, 21, 24, 2, -37, 35, -64, 17, -42, 34, -12, -41, -28, -37, -6, 5, -4, -6, -1, -22, -42, -38, 15, 10, 2, -24, 0, 3, -44, 35, 18, -3, 24, -1, 16, 14, 15, 11, -22, 3, -19, 22, 38, -36, -2, 9, 26, -12, 23, 36, 19, -37, -1, 3, 22, -29, 29, -23, -6, -8, 8, -32, -12, -44, 26, 8, -27, -31, -28, 22, 8, 8, 5, -32, -30, -38, 26, 36, -24, -22, 39, -30, -22, 17, -11, -13, 22, -20, -1, 25, -19, 30, 20, 21, 2, 15, 8, 16, 13, 34, -24, 15, 34, 22, -2, -10, -2, -17, 5, 18, -19, -34, -1, 35, 24, 
  -48, 29, -39, -49, -28, -33, -26, 41, 14, -1, 1, -17, -43, 23, -30, 1, 36, -65, -33, -54, 20, 12, 0, -2, -44, -28, 16, 21, -44, -7, -22, -22, -39, 25, -26, -49, -18, 33, 11, 27, 9, 4, -21, -47, 4, -34, 9, -25, 26, -9, 17, 29, 4, -5, -2, 16, 31, -18, 17, -5, 31, -25, -16, 26, -16, -17, 0, -83, 13, 2, -15, 28, -25, -19, -27, -45, 22, 11, -40, -54, 12, 12, 37, -61, 16, 10, -5, -37, -29, 11, 3, 39, 23, 27, 3, 3, -36, -18, 38, -8, 0, 38, 14, -38, -34, 34, 28, -26, -38, -1, 43, -3, 24, -13, 3, 22, -46, 8, -39, 29, -19, 12, -12, -23, -37, -27, 7, -44, -44, -33, 8, 19, -11, 29, -22, 1, 27, 15, -16, -1, -43, 37, 12, -64, 11, 26, 8, 36, -9, 41, 31, -35, 21, -38, -46, -75, -23, 31, -25, -21, -38, 26, -32, 26, 32, -24, -38, 30, -5, 33, 18, -34, -49, 23, 15, -30, -8, 34, -8, 7, 22, -19, 36, 6, 31, 19, 4, 41, 20, -31, 4, -11, 
  -22, 23, 12, -1, 16, 23, -37, -3, -3, 23, -4, 13, -22, 30, 26, -5, 32, -3, -17, -32, 29, 15, 11, -40, 24, -26, 7, 19, -35, -33, -24, -8, -34, -20, 5, -37, -16, -29, 21, -29, 14, 37, -7, -18, -43, 7, -6, 33, -9, -34, -38, -27, -25, 32, 19, -31, 0, -7, -19, -19, -40, -1, 37, -35, -22, 1, 29, 26, 40, -29, 30, 37, 33, -38, -4, 3, 3, 15, 40, -3, 25, -38, 14, 11, -6, -15, -29, -26, 3, -20, 38, -6, 2, 31, -6, 11, -7, -31, -31, -24, 5, 6, -36, 32, 38, 39, 8, -38, -32, -39, -21, 6, -4, 4, 39, 38, -41, -31, 0, 1, 28, -21, 32, 23, 37, 42, -39, -19, -36, -31, -41, -27, 19, 15, -30, -27, -40, -10, -5, -12, -24, 35, -16, -42, -19, 15, 5, -16, 16, 11, 10, 37, 34, 36, 14, -7, 1, -27, -26, -4, -32, -40, -16, -7, 29, 6, -34, -7, -21, -40, 28, -37, -33, -7, -22, 13, 35, -43, -16, -2, -26, -18, -17, -20, 36, 18, 11, -4, -13, -2, 36, 24, 
  -65, -38, -1, 41, -18, 15, 28, -38, -34, 28, -6, 37, -26, -11, 19, -44, 15, -71, -33, 25, -35, -18, 31, 40, -34, -25, 6, 8, 23, 17, 16, 45, -32, 29, -11, 39, -20, 9, 50, -12, -3, 37, 19, 2, -17, 21, 32, 35, -7, -19, -37, 8, -68, 32, -43, 6, -24, 0, -36, -5, -24, 13, 17, -15, 13, 30, -42, 45, 36, -13, -15, 26, 16, 6, -36, -9, 14, 2, 32, -97, -42, -1, -22, 20, 10, 30, 11, -35, -32, 16, -6, -5, 9, 3, -29, -16, -8, 9, 18, -6, 40, 37, 33, 21, 8, 29, 22, -72, 19, 17, -15, 32, -18, -30, -26, 10, -42, -34, 23, 44, -9, 7, -7, -22, 2, -52, 25, -16, -33, -38, 26, -15, 28, 28, 52, -2, 30, 41, 12, -70, 0, 0, -1, 10, -35, -13, -32, -36, -6, -7, -6, 35, -29, 31, 9, -57, 44, -20, 27, 5, 29, -45, 29, 50, -37, 0, -36, -29, 34, 7, 9, -16, 6, 16, 7, -38, 35, 32, -43, -8, -13, 1, 28, -24, 34, -16, 36, -20, 20, -55, -14, -17, 
  -27, -22, -17, 65, -35, -23, 29, 42, 11, 3, -14, 15, 37, 49, -45, -52, 0, -2, -31, 20, -20, 11, 45, -24, -22, -14, -47, -38, -9, -32, 10, 52, -34, -17, 42, 1, 39, 18, -26, -40, -15, -2, 10, -33, 22, 54, -23, 17, 17, -7, -1, 19, 28, -8, 12, -35, 48, 48, -11, 4, 18, 29, 16, -18, -46, -36, -15, 44, 23, 43, -29, -6, -6, -8, 28, 1, -28, 32, -41, -40, -34, 31, 24, 73, -40, 9, 43, -34, -6, 13, -8, 15, 12, -2, 8, -20, 25, 30, 21, 50, 33, 15, 49, -26, -13, 0, 51, -64, 26, -28, 20, -20, -2, -31, -1, -23, 8, 55, -14, -14, -32, -51, -18, 23, -13, -21, -3, -8, 17, -40, -16, 11, -27, -18, 15, 18, -35, 2, 13, 14, 36, 21, -21, 5, 25, -25, -16, -13, -16, -21, -16, 37, -24, 31, -53, -43, -18, 30, 11, 31, -28, -27, 24, 35, -12, 25, -5, 21, 33, -21, 17, 37, -40, 19, 14, 39, 28, 19, 29, 10, 40, 49, 29, 21, -21, 24, -2, -17, -18, -9, 50, 20, 
  4, -5, 36, 92, 39, 41, -33, -39, -14, -25, 10, 36, 42, 16, 27, -28, -30, -43, 19, 4, -39, 4, -15, 20, 11, 27, 17, 10, -21, -34, -12, 51, -38, -52, 27, -13, 7, 7, 20, 32, 23, 7, -24, -12, -45, -23, -19, -24, 13, -17, 21, 23, 20, 23, -33, -9, 47, -1, 40, -7, 6, -46, 35, 44, -30, 24, -14, 87, 18, 23, -26, -9, 18, 3, 4, 2, -34, -19, -7, -32, -16, 15, -9, 33, -18, -40, 35, -9, -13, 29, -24, -12, 55, 22, -7, -60, 44, 0, 9, 65, -14, 33, 26, -38, -13, 7, 1, -85, 49, 2, -8, -16, 29, 23, -32, -36, -17, -38, 24, 26, -32, 25, -9, 20, -26, 32, 37, -16, 20, -5, -13, 17, -31, 21, 11, 16, -8, -12, 13, -28, 30, 14, 15, 50, -56, -26, -43, 36, 13, -33, -33, -25, -1, 14, -8, -114, 38, -4, 37, 61, 20, -1, -23, 23, -1, -8, 17, -26, 5, 28, -8, 14, -32, 9, -2, -5, 43, 22, 17, -42, -14, 44, -19, 14, -29, 16, 22, 24, -26, -19, 21, 10, 
  -26, -2, -43, -20, 2, 4, 33, -9, 22, 40, 35, 0, -37, -6, 11, -14, -41, 33, 7, 9, 36, -26, -43, 15, 7, 26, -9, 8, 11, 31, 35, -8, -40, 5, -4, -40, 33, -41, -24, -11, -15, 11, 31, 8, 32, -13, -22, -27, -38, -19, 7, -25, -17, -8, -8, 23, -13, -30, 26, 36, -40, 28, -9, -11, -24, 15, -14, -39, -10, -10, -18, 25, -11, -29, 29, 1, 7, -27, 39, -35, -13, -44, -11, 12, 31, 30, -17, 23, -22, 9, 35, -19, 7, 41, 13, -33, -30, 18, -43, 18, -14, 10, 39, -2, 20, 31, 12, 12, -9, 35, -1, -6, 10, -31, -38, -18, -29, -27, -25, 10, -42, 17, -10, -37, 7, 27, 30, -36, 26, 36, 5, 22, -38, 12, 22, 12, -44, -35, -4, -32, -28, 26, 4, 24, -14, 34, 22, 1, -21, -9, -34, 38, -8, 5, 44, -32, -12, 18, -6, 12, -15, 9, -19, -10, 3, -8, -36, 9, -33, 10, -10, 10, -38, -25, -42, -29, -22, 32, 13, -6, -36, -33, 13, 40, 32, 20, -37, -12, -2, -12, 24, -36, 
  -12, 5, 1, -30, 11, 0, 26, 9, 21, 17, 25, 23, -7, 7, 4, 24, -4, 17, 5, 14, -24, -20, -32, -1, 37, 29, -33, -39, -43, -21, -25, 17, 33, -27, -15, 23, -28, 32, 1, 17, 5, -9, 30, -8, 32, -42, 38, -14, -13, 17, -27, 3, -42, 34, 26, 30, 5, -19, -11, 35, -33, -3, -22, 35, 20, 13, 24, 14, -8, 19, -19, -21, 10, 1, -20, -15, 15, -31, 8, -10, 23, -19, 30, -23, 24, 39, -24, 4, -40, -28, 21, -4, -24, 16, -23, -13, -6, 1, 17, -23, -25, -28, -12, 19, -24, 35, 25, 13, 25, -45, 6, -37, -33, 22, 27, -7, 25, -39, 17, 34, 28, 39, 1, -27, -11, 2, -20, -15, 34, -4, 18, 8, -29, 19, 15, -17, -2, 30, 40, -2, 15, -41, 7, 25, -38, -43, -21, 17, 3, 12, 27, -8, -20, -40, 14, 20, -11, -37, 1, -16, 34, -17, -45, -1, -42, 26, 20, -40, 22, -5, -2, 9, -46, 17, 4, -20, -19, 1, -34, -33, 12, -27, 25, 33, -44, -19, -10, 4, -23, -31, -8, -10, 
  -40, -22, 38, 25, 41, 15, 46, 20, 5, 54, -10, 31, -58, -15, 46, 57, -59, -9, -5, -16, -2, -23, -10, -22, 0, 13, 13, -15, 11, -13, -5, 30, 26, 14, -5, -16, -22, -28, -1, 22, -4, -18, 33, -5, 11, -37, 20, 33, 43, 25, 30, -26, -21, 1, 44, 17, -43, 17, -2, 54, -34, 17, -28, -42, -3, -23, -6, -36, -41, 30, 45, 2, 22, 5, 6, 55, 33, -23, 26, 32, 9, -1, 38, -29, 7, -23, 11, -20, 5, -2, 41, -73, 48, 0, 34, -30, -24, 41, -10, -59, 35, -4, -37, 30, 30, -61, -36, 24, 35, -38, -24, 37, -7, 9, -3, 41, 27, 11, 32, -2, 23, -12, 61, -12, 6, -21, -53, -33, 7, 45, 10, -19, 14, -19, -15, 25, -18, 32, 36, 27, -4, 9, 52, -50, 7, -10, 16, 31, 31, -1, 49, -13, -11, 0, -9, 31, 60, 14, 14, 1, 1, 69, -1, -26, -28, 14, 3, 3, -3, 4, 7, 57, 6, 5, -23, -33, 35, -21, -22, 2, 14, -3, -44, 39, -16, -4, 45, -34, -52, 8, 6, -12, 
  38, -5, 8, -39, 19, 31, 14, -33, -19, -36, 7, -5, 34, -39, 23, -1, -16, 21, 4, -16, 10, 13, 14, 6, -36, 25, 37, 27, 45, -1, 36, -32, -28, -17, 33, 7, 19, -11, -40, -2, 4, -27, 16, -44, -10, 0, 22, -29, -30, -10, -7, -25, 7, 19, -34, 6, 38, -41, -23, -8, 28, -19, -34, 3, 39, 8, 14, -2, 17, -43, 12, 1, -5, -40, -38, 34, -20, -40, -7, 14, 11, 37, -21, 0, 0, 2, -24, -38, -16, -40, -40, -30, -1, 0, 36, -41, 14, -20, 27, 11, 7, -25, -30, -32, -42, 23, 38, -34, -25, -23, -5, 30, 0, -30, 35, 16, 19, 17, 15, -32, 24, 17, 36, -37, 17, 1, -21, -19, 25, 23, 6, 15, -4, -24, 37, -15, 7, -21, 20, 42, 1, 14, -34, 37, 39, 21, -23, 26, 10, 1, -27, -14, -40, -35, -37, 38, -40, 10, 32, 15, -30, 2, 31, -38, -19, 36, 37, 26, -42, -43, 14, 6, -19, -35, -33, 35, -18, 31, 11, -2, -39, -21, 14, -24, 8, 36, 36, 20, -28, -28, -41, -11, 
  2, 5, 1, 26, -12, -10, 27, 3, 38, 31, -8, -42, -42, -27, -1, -21, -12, -54, -30, 30, 21, 22, 25, -43, -32, 37, 12, 6, 18, -21, 0, 11, 30, -43, 30, 5, -26, 23, 9, -6, -9, 1, 32, 34, 14, 38, -22, 3, 23, 63, 4, -4, -7, -29, 31, 30, 1, -36, 42, 46, -54, -1, -46, 27, 17, -8, 18, -18, -12, 1, 20, -18, 20, -6, -27, 49, -36, -21, 2, 25, -5, -43, -27, -2, 40, -19, -25, -37, 2, -5, -15, -11, -2, 21, -20, 15, 15, 8, -18, 3, -37, 7, -50, -43, -17, -70, -27, 5, 32, -27, -4, 10, -1, 11, -16, -18, -37, 32, 17, 26, -22, 2, 53, 30, 5, -45, -3, -5, -11, 20, -9, 25, 32, 11, 35, 39, -24, 28, 22, 2, 29, -34, 2, -60, 3, 11, -34, 24, -31, -21, 41, -12, 36, -27, 36, -28, 47, -24, -4, -21, 11, 38, 22, 2, -20, 16, -60, 11, 10, 2, -30, -7, -5, 20, 7, 4, 12, -26, 40, -16, 14, -20, -20, -7, -5, 42, -3, -27, -9, -13, -34, -19, 
  11, -5, -26, -28, -17, 33, 16, -7, -38, -32, -17, 30, -24, -25, 36, -11, 35, 17, 42, 14, -5, 31, -18, 2, -6, -19, 8, 0, -44, 21, -2, -27, -18, 11, -31, 14, 11, 26, -27, -14, 18, -23, 8, -36, 28, -2, 22, 21, 29, 5, -27, 15, 26, 30, -10, 33, 21, -38, 0, -27, 17, 1, -19, 9, -31, -44, 30, 41, 35, -27, 22, -14, -16, -10, -12, 25, -36, -41, -28, -17, -33, -17, -12, -41, 6, -41, 18, -2, -12, -28, -16, -9, -14, 19, -10, 33, 4, 22, -4, 24, 40, 1, -31, -38, 19, 10, 20, -42, 23, 13, -33, 24, 31, -6, 16, 41, 11, 16, 42, 36, -30, 26, 6, -15, -43, -28, -3, -16, -17, -21, 33, 38, 32, 22, 1, -40, 27, 26, -23, 33, 32, -10, 11, 6, -46, -49, -29, -29, -26, -12, -5, -31, 34, -38, 21, 15, -15, 15, 11, -8, -19, 0, 27, -11, -19, 12, 15, -6, 25, -40, -23, 4, -10, 19, -30, -42, 35, 4, -10, 26, 37, 7, 5, -35, -8, -35, -11, -26, -46, -12, 39, -11, 
  -1, -16, -6, -24, -18, 10, 15, 39, -5, 1, -25, -7, -22, -14, -24, 7, 23, 37, -4, 30, -36, 13, -7, 40, 14, 1, 6, -10, 22, -8, -5, 33, -26, 28, -25, -16, 29, -31, 11, 8, 12, 6, -14, 40, 56, -19, -33, -19, 11, 27, -36, 12, 12, -7, 27, 25, 28, 9, 27, -21, 40, 39, -13, 22, -8, -21, -27, 7, -38, 8, 28, 17, -12, -11, -10, 12, -26, 2, 27, 70, 30, -25, -6, 11, -2, 26, -29, 35, -7, -19, 51, 12, -52, 36, -3, 25, 32, -31, 25, -28, 26, -13, -3, -38, 42, -6, -2, -46, -33, -19, -40, -29, -7, -22, 21, -8, 32, 31, -5, 40, 50, -7, -38, -41, 7, -38, 30, 13, -31, -12, 4, -46, 16, 5, -49, 24, -31, -35, 34, 6, 34, 10, 36, 30, 55, -48, -25, 9, -14, 40, -50, 39, -3, -26, 40, 84, -41, 8, -17, 11, 23, -11, -32, 38, -38, 26, -16, -39, 18, -4, -34, -10, -23, 29, -35, 27, 14, -22, -8, -8, -33, 7, 36, 35, 13, 37, -43, -28, 22, 5, 17, -32, 
  8, -7, 6, -11, -24, -28, -21, 3, -42, -45, -23, 23, -29, -31, 25, 37, 19, 30, -43, -34, 20, -14, -50, -42, 3, -41, -5, 10, 41, -37, -48, -10, 35, 8, -15, 13, 31, -29, -12, 7, 11, -28, 6, 27, -10, 35, -16, -5, 25, 17, 38, -3, -1, 6, 16, -40, -40, -20, -3, -6, -47, -8, -6, 35, 0, -23, -13, 27, -22, -14, -16, 19, 29, 22, -38, 34, 4, -5, 32, -21, 2, -15, -43, 30, 37, 16, -2, -20, 10, -31, 18, -25, -21, -11, -42, -28, -40, -45, -14, 41, -41, 10, -42, 30, 9, -28, -40, 3, -7, 0, -37, -37, 3, -23, -8, -32, 12, 14, 17, 11, 0, -31, 3, -10, -26, 2, -14, 7, 0, 16, -47, -37, -8, -24, 17, 15, 4, 4, 19, -26, 23, -3, -27, -10, 26, 6, -9, 30, 37, -40, 15, 34, -1, -32, 19, 34, -13, 0, 21, -41, -2, 30, -17, 12, -1, 37, 15, -27, -9, 23, 12, -16, 27, -6, 16, 15, -14, 22, 10, 31, 27, -26, -25, 16, 20, 21, 26, 0, 0, 15, -23, -24, 
  -17, -36, 7, -6, 24, -37, 36, -23, -14, -42, -31, -11, -10, -40, -14, 28, 14, -13, -36, 10, -39, 12, 37, -3, -43, -43, -13, -14, 3, 2, -2, 4, 40, 24, -45, -31, -12, 14, -29, -36, 14, -15, -21, 6, 35, 38, -33, -10, -18, 0, 15, 17, -24, -29, 28, -21, 26, 38, -22, -1, 7, 6, -32, 32, 3, -15, -42, 29, -33, -41, 22, 35, 39, -9, 1, 1, -20, -12, -25, -38, -41, 34, 31, 14, 36, 38, 23, 37, -37, -16, -27, -29, -15, 6, -36, -9, -13, 13, -19, -4, 27, -44, -26, -31, -28, -19, 27, 4, -31, -16, 27, -9, -20, 17, 22, -6, 32, -21, 17, -34, -21, 36, -36, 38, 27, 17, 27, -2, -23, -12, -3, -32, 39, -17, -26, -28, -26, -43, 16, -10, -33, 22, 1, -14, 17, -10, 8, -37, -26, 4, -4, 27, 34, -22, -32, 29, 8, -21, -10, -1, -10, 4, 9, 33, -25, -15, -6, 11, 0, 37, 6, 6, 9, 6, 20, 18, -21, -13, -42, 36, 22, 14, 2, -27, -27, 33, 5, 3, -40, -14, 14, -33, 
  -38, 20, 19, -18, -1, 1, 20, -34, -16, -52, -18, 7, -11, 67, -17, -58, -25, -7, -31, -44, 20, -9, 2, 15, -17, -34, 3, -14, -9, 46, 36, 16, 14, -4, -20, 45, -53, 25, 43, 29, -35, 4, 3, -7, -5, -65, 0, -9, -14, -3, 35, 35, 17, -39, -22, -37, 5, -26, -16, -21, 29, -73, 32, 5, -23, -2, -36, -6, -25, -39, -52, -5, 58, 26, -55, 41, 27, -35, -41, -73, -30, -7, 1, -62, -11, 5, -32, -32, -8, 13, -7, 0, 14, -43, 38, -67, 18, 22, 4, -16, -34, 16, 25, -32, 21, -2, -14, -39, 34, -6, -21, -41, 22, 21, -2, -4, -27, -43, 22, 29, -32, -30, -1, -21, 36, -29, -20, 8, -52, -3, 23, 8, -42, 7, -19, -18, 6, 36, 26, -50, -40, -11, 14, -18, -7, -6, -16, -31, -35, 11, 17, 39, 0, -1, -3, -72, 13, -3, 36, -56, -35, 24, 2, 33, -28, 6, -4, 16, -28, 26, 14, -7, -49, 33, -21, -27, -21, -26, 17, 28, 26, -42, -34, -30, 15, 47, -13, 40, 24, -47, 37, 4, 
  22, -6, 19, 69, 13, 26, -23, 6, -1, 32, 44, -37, 28, 55, 4, -38, -22, 35, -22, 18, 35, -8, 21, 29, -53, 31, 44, 8, -9, 41, -46, 34, -26, 18, -32, 4, 9, -15, -20, 21, -37, 16, 7, -13, 37, -37, 31, 21, -32, -57, -42, 0, 8, 15, 4, 21, -31, -2, -24, -11, -12, -22, 13, 20, 7, -42, -27, -1, 22, -10, -17, -9, -33, 22, -43, -48, -20, -6, 15, -17, -25, 13, -17, 47, -11, -40, 15, 24, 3, 19, -1, -53, -19, 9, -46, -62, 5, 11, 5, -38, -30, 11, -9, -11, -6, 54, -39, -43, -3, 30, 19, -21, 30, -37, 37, 13, 25, -13, 11, 9, 2, 31, 18, 46, 48, 1, 1, -28, -35, 22, 27, 40, 28, 25, 0, 40, -52, 3, 6, -49, 23, -16, -52, 29, 1, -28, -25, 61, 1, -33, -11, -7, -45, -42, -20, -80, 23, 19, 5, 53, -16, 22, 40, 21, 39, 39, 1, 31, -8, -11, 16, -46, 14, -6, 2, -5, 20, 18, -39, -29, -8, 18, 28, -34, 54, 9, 2, -16, -26, -12, -25, -27, 
  44, -23, -44, 51, 30, -34, -36, -30, -8, 23, -4, -7, 14, 48, -7, -20, -5, -33, -41, 52, -28, -11, -50, -9, -33, 30, -3, 12, 2, 6, -38, 25, -26, 39, 30, 38, -22, -13, -45, 13, -9, 42, -56, -39, 47, 30, -36, 16, -20, -26, -15, 18, -9, -19, 9, -7, -12, 3, -22, -52, 44, 8, 11, -4, 40, -40, 14, 81, 15, 30, 16, 16, -40, 17, 25, -2, 32, 25, -15, 45, -42, -4, 39, 32, -25, -20, 13, -20, -37, 28, -19, -16, -48, 13, -51, 30, 16, 3, -36, 11, 13, 28, -2, 27, 6, -11, 14, 14, -13, -1, -17, 17, -23, -10, -15, -35, 38, -22, 58, -32, 20, 30, -23, 10, 1, 38, -26, 43, 21, -28, -11, 49, 27, 26, -27, 25, -15, 33, 24, 21, 1, 16, -20, 81, -1, -20, 22, 31, -7, 8, -1, -22, -24, 27, 0, -27, -16, -32, -18, 15, 39, -59, -25, 39, -11, -10, 40, -4, 29, 18, -26, 25, -7, 10, -41, -15, 2, 3, 28, 40, -11, 31, 2, -32, 26, 14, 3, -13, -36, -25, 22, -1, 
  56, 45, 24, 34, 16, -28, -35, 41, -35, -17, 19, -40, 41, 7, -55, 43, 40, -17, -46, 56, -31, 2, -35, 7, -60, -27, -23, 6, 49, -30, -53, -46, -48, 20, 17, 6, 3, 4, -9, -3, -6, 49, -32, 41, 7, 60, -24, -36, -34, 0, -30, -4, -11, -9, 5, -11, 15, -14, -34, 39, 43, -9, 21, 2, -1, -8, -26, -5, 47, 35, -30, 36, -13, -28, -1, 55, 36, 8, -26, 30, 39, -13, -23, 30, -38, -17, -2, 28, -25, -45, 42, 0, -30, 33, -53, 30, -21, -30, -1, -19, 40, -28, -25, -1, 39, 14, -49, 31, 0, 5, 8, 26, -6, -19, -26, 21, -27, 9, 15, 38, 19, -1, -57, -43, 20, 44, -10, 13, 12, 22, 32, 48, -20, 1, -36, 61, 14, 22, -9, 33, -40, 17, 9, 78, 44, -47, -24, 41, 77, 17, -70, 38, -69, -27, 55, 12, -42, -18, -39, 106, -22, -5, 17, 14, -10, 36, -32, -17, -35, 13, -24, 6, 0, 29, -38, 37, 30, -5, -44, 19, 21, -21, 1, 0, -7, -35, 22, -39, 18, 13, 25, -2, 
  -10, -15, -3, 9, 16, -14, 18, 5, 2, 7, -8, -11, -4, -13, -10, -45, 33, 5, -23, 17, -4, -38, 19, -37, -40, 23, -13, -7, 21, 11, -31, -1, -16, -12, -15, -26, -8, -37, 15, -16, -24, 15, -45, -20, 2, 20, 2, -21, 37, 18, 15, -12, -16, 5, 19, 3, 36, 36, 13, -14, 49, 40, 16, 42, 24, 9, -37, 38, -36, 39, -25, 23, 24, 35, 25, 20, -16, 34, 0, -54, 0, 24, -1, 33, -38, 36, -6, -18, -21, -21, -29, -9, -13, -42, 25, 16, -11, 7, 41, 40, -5, 2, 39, -22, -2, 8, 39, -41, 19, 25, -13, 20, 1, -11, -16, -14, -31, 2, -12, -3, -41, 28, -42, -23, -15, -37, 29, -38, -6, -50, -14, -15, -38, -34, 19, 0, -41, -33, -26, -13, 23, 9, 22, 61, 21, -42, 24, -18, 16, -20, -38, -2, 14, 20, -37, -60, -21, 10, 8, 40, -40, 6, 25, 32, 27, 30, -13, 40, 22, -7, -28, -17, -30, 44, 16, 22, -13, 7, -26, 35, 44, -10, 12, 15, 1, 8, -6, 33, 31, 12, -25, 29, 
  -26, -1, 8, -56, 2, -30, -1, 24, 23, 10, 36, -29, -38, -29, -16, -28, -43, 25, -40, -50, 3, 18, -18, 13, 37, 36, -14, -22, 25, -25, -16, 10, 10, 32, -2, -24, 18, 32, 11, 14, -37, 18, 6, 7, -23, 13, -41, -37, 15, -22, -17, -36, 41, -11, 11, 27, -38, 39, -25, 26, 24, 15, 23, 13, -40, 13, 21, -4, 25, 24, -42, -12, -22, -23, 2, 8, -22, -43, 18, 2, 13, -28, 15, 29, 7, -40, -44, -13, -15, -40, -42, 6, 15, -31, -41, -37, -40, -6, 4, 8, 14, -31, -12, 31, -4, -41, 18, -29, -7, 28, -7, -6, 21, 23, 39, -42, -18, 36, -9, -9, -3, 28, 39, 14, 18, -39, -1, -11, 15, 33, -18, -15, 19, 18, 33, -42, -9, 40, 39, 11, -1, 33, -4, 8, -37, -45, -18, 9, 9, -16, 28, 39, -19, -28, -26, 5, -27, 37, 38, 37, 31, 1, -30, 16, -22, -12, -25, 35, 17, -11, -43, -12, 1, -11, -18, 40, -46, -15, 7, 28, -5, -40, -5, -32, 18, 37, 15, -34, -15, -43, 19, 26, 
  17, -6, -30, 50, -27, 31, 26, 36, -26, -1, -17, -12, -10, -44, 29, 38, -39, -80, -24, 14, -15, -34, 14, 29, -3, 42, 20, 18, 5, 35, 19, 12, 59, 29, 20, 17, 40, 16, 48, 11, 22, -48, 16, -13, 9, -26, 20, 3, -8, 19, -10, -11, 3, -7, 7, 26, -29, -29, 42, 4, -24, 11, 4, -31, -42, -30, 7, 21, 5, 16, -9, 16, -26, -7, -29, 12, 18, -36, 45, 1, 15, 18, 8, -1, -16, 8, 45, 28, 49, 14, 25, -46, 7, 19, 8, 44, -32, 13, -30, 3, 19, -14, -40, -29, -1, -5, -22, -6, 41, -19, 1, 23, 43, 38, 15, 6, 30, -13, -33, 39, -45, -26, 42, -12, -50, -22, -51, -26, 19, 16, -36, -30, 9, -22, -14, 4, 22, 48, 13, 36, 36, 34, 34, 34, -9, -10, 16, 28, 6, -37, -1, 16, 44, -2, 28, 26, 27, 31, 6, 17, 10, 31, -19, 42, 31, 4, 15, -34, -20, -42, 32, 48, 39, 28, 32, 18, 10, -35, 27, -2, 3, -17, 1, -12, -12, -21, 30, -41, -15, -1, 3, -5, 
  0, -43, -16, 30, -11, -42, 13, -33, 37, 5, 29, -3, 43, 40, -38, 16, -9, 12, -24, 0, -36, -27, 32, 6, 2, -20, -26, -35, 20, 6, 20, 35, -48, -23, 3, 1, 4, -15, 7, 33, -41, 30, 20, -58, -20, -9, 14, 2, 39, -15, 16, 37, -45, -33, -12, -4, -6, 31, 32, -10, -16, 15, -36, 23, -34, 40, -22, 20, -16, 3, 25, -42, -12, -6, -37, 30, 43, -2, -31, -32, -2, 32, -29, 56, 37, -38, 21, -18, -17, -2, -54, -40, -31, 8, -5, -65, 21, 40, 34, 24, -28, 21, 40, 15, 5, -16, 35, -74, -11, 18, -38, -27, 30, 43, -13, -3, -30, -35, 7, -6, -13, 15, -14, -35, 26, 41, 40, 11, 7, -31, 6, 60, -20, -17, 29, -35, -42, 28, -43, -59, 20, 19, -42, 6, -20, -29, 24, -34, -12, 2, 31, -19, 44, 13, -51, -47, -27, 2, 42, 31, -44, 14, 26, 38, -19, 13, -30, -25, 29, 29, -11, 21, 3, 33, -12, -25, 34, -5, -13, 36, -22, 37, 1, -30, 28, 39, 35, -2, -25, -45, -31, -38, 
};
const TfArray<2, int> tensor_dimension13 = { 2, { 64,192 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0035939060617238283, } };
const TfArray<1, int> quant13_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int8_t tensor_data14[8*3*3*1] = { 
  /* [0][0][][] */ -127, 26, -127, 
  /* [0][1][][] */ 76, 90, -111, 
  /* [0][2][][] */ 43, 76, 82, 
  /* [1][0][][] */ 23, -7, -70, 
  /* [1][1][][] */ -76, 33, -6, 
  /* [1][2][][] */ 12, -127, -41, 
  /* [2][0][][] */ 6, -92, -95, 
  /* [2][1][][] */ 110, -127, -107, 
  /* [2][2][][] */ -104, 81, -56, 
  /* [3][0][][] */ -127, 79, -53, 
  /* [3][1][][] */ 100, 94, -109, 
  /* [3][2][][] */ -19, 66, -45, 
  /* [4][0][][] */ -12, 32, -91, 
  /* [4][1][][] */ 37, 88, -80, 
  /* [4][2][][] */ 14, 10, -127, 
  /* [5][0][][] */ 108, -1, 30, 
  /* [5][1][][] */ 18, -16, -84, 
  /* [5][2][][] */ -101, -127, 107, 
  /* [6][0][][] */ -82, -65, -112, 
  /* [6][1][][] */ -84, -12, -15, 
  /* [6][2][][] */ 127, 57, -89, 
  /* [7][0][][] */ -47, -102, -110, 
  /* [7][1][][] */ 127, 109, -107, 
  /* [7][2][][] */ -32, 100, -15, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant14_scale = { 8, { 0.0018268184503540397, 0.0020218128338456154, 0.0023526570294052362, 0.0023538183886557817, 0.0022816157434135675, 0.0010155781637877226, 0.002329148817807436, 0.0014532859204337001, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(8) int8_t tensor_data15[8*3*3*8] = { 
  /* [0][0][][] */ -114,-97,-51,-94,-87,110,99,-48, -78,-66,-117,-51,94,9,-67,88, 92,-24,-32,-52,-114,-98,-38,104, 
  /* [0][1][][] */ -44,82,-126,27,28,62,-73,74, 68,-5,-89,-105,85,54,71,-118, 34,-29,92,-93,76,98,-3,31, 
  /* [0][2][][] */ 99,-55,-45,-105,-97,-105,89,-75, -21,62,-63,-127,-80,12,89,56, 7,88,0,-62,99,5,-3,-34, 
  /* [1][0][][] */ -58,-20,80,-85,-73,17,-56,11, 5,69,-27,63,47,-96,44,-17, -84,2,-35,67,-26,77,21,-48, 
  /* [1][1][][] */ -62,33,32,31,-18,61,-12,-54, 43,-67,79,-13,16,54,79,5, 38,25,-14,-32,-66,22,15,10, 
  /* [1][2][][] */ 80,-61,-77,50,-17,32,65,127, 43,74,35,10,1,-32,32,-62, -62,17,60,25,74,9,8,20, 
  /* [2][0][][] */ -82,-16,66,17,-58,63,-75,-28, 7,1,87,-97,-56,-43,-95,3, 70,111,8,31,-22,16,110,22, 
  /* [2][1][][] */ 38,105,-37,57,-52,78,51,-63, -26,19,-68,16,-27,-31,-86,-99, 21,-28,39,-15,45,76,18,-36, 
  /* [2][2][][] */ 68,63,78,111,115,64,101,127, 39,-49,104,-40,15,-39,-56,72, 59,45,-16,-86,-62,-30,-8,1, 
  /* [3][0][][] */ -90,3,22,-72,-4,-16,-2,51, -51,-36,83,-91,-52,70,91,-14, -29,-46,-33,106,13,73,89,-49, 
  /* [3][1][][] */ 57,-72,78,-18,71,12,-23,96, -22,35,-111,26,36,-106,5,53, -73,83,58,-103,68,87,-60,15, 
  /* [3][2][][] */ -21,-45,-105,19,-25,-34,86,46, 81,5,-47,80,-26,33,92,-3, 6,-72,82,-43,91,127,9,23, 
  /* [4][0][][] */ 51,63,20,6,67,-117,-13,-47, 105,39,-75,82,-59,39,55,-114, -85,-41,-28,-24,5,106,-41,-22, 
  /* [4][1][][] */ -50,52,-87,-117,11,61,93,19, 122,-11,-105,30,70,-67,89,-83, -42,-29,91,61,-95,-1,89,58, 
  /* [4][2][][] */ -16,-108,32,61,-124,-17,-20,34, -57,35,-31,77,-127,-54,-112,9, -46,48,-66,-47,-19,37,-88,-126, 
  /* [5][0][][] */ 66,-32,-72,7,-107,-89,40,48, 97,-105,95,-77,11,-30,91,-119, -67,-110,-114,-25,-123,24,37,-55, 
  /* [5][1][][] */ 29,59,97,-31,-75,-112,-77,-101, -43,-49,-10,-123,42,-85,-14,52, 97,-27,-16,83,-78,75,61,-61, 
  /* [5][2][][] */ -127,64,73,-63,67,48,7,3, -113,7,-71,3,-14,77,87,48, 34,-76,-35,103,14,24,-73,-103, 
  /* [6][0][][] */ 60,0,17,-15,39,53,81,14, 7,-104,38,76,-62,-66,68,-127, 21,29,-6,30,22,-102,-103,-7, 
  /* [6][1][][] */ -14,82,94,-38,-25,-9,-106,-71, -51,-53,72,77,-6,53,-44,-63, 79,-11,-66,45,-31,-6,-37,-25, 
  /* [6][2][][] */ -12,-90,8,-44,-7,58,-84,-64, -118,23,21,-68,8,31,-58,12, 95,-88,-18,81,-87,10,49,-51, 
  /* [7][0][][] */ -43,86,-49,45,94,-15,-13,127, -37,-29,108,-92,92,-64,39,22, 40,5,-55,17,-66,-4,52,-88, 
  /* [7][1][][] */ 93,89,77,74,86,94,-89,-25, -98,92,-57,-71,-41,40,32,-113, 36,-5,48,17,-56,-59,98,-2, 
  /* [7][2][][] */ 45,23,35,34,-50,25,57,-31, 81,-28,103,-38,13,29,-12,-1, -33,29,90,47,84,-40,74,-55, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,3,3,8 } };
const TfArray<8, float> quant15_scale = { 8, { 0.001603758311830461, 0.0023118664976209402, 0.0019632200710475445, 0.0018466666806489229, 0.0017613823292776942, 0.0016509899869561195, 0.0019472206477075815, 0.0020776204764842987, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(8) int8_t tensor_data16[8*3*3*8] = { 
  /* [0][0][][] */ -13,-9,-5,-107,21,31,-75,85, 75,17,-96,-109,23,71,62,26, 0,80,-67,-48,-61,-91,-12,-122, 
  /* [0][1][][] */ 42,-33,-9,-93,86,-84,20,-34, 11,72,67,62,-78,-12,24,-10, -64,-48,-113,-114,47,-107,-118,-115, 
  /* [0][2][][] */ -127,62,41,-82,126,-83,-112,-73, 81,118,3,-18,-1,1,-110,-33, 100,-109,-82,-92,72,-80,-103,-74, 
  /* [1][0][][] */ 96,81,29,76,62,-8,-52,-46, -38,-9,-19,11,23,-19,-7,5, 9,-59,30,-2,-39,-10,-72,45, 
  /* [1][1][][] */ 23,4,64,-38,-6,22,63,-29, -11,-6,75,-27,72,96,75,66, 20,81,-57,-44,45,-72,-69,57, 
  /* [1][2][][] */ 112,86,72,127,53,50,-48,90, 9,69,6,55,-67,-49,79,46, 97,53,2,88,-16,-59,-36,32, 
  /* [2][0][][] */ -127,-18,77,27,-7,59,-65,109, 69,-68,50,-62,-109,-21,-73,-14, 6,-76,-66,48,-10,-69,-58,14, 
  /* [2][1][][] */ 45,-58,57,13,-10,-52,-25,53, -63,17,-10,49,-78,9,-19,36, -2,-50,-33,25,16,-37,48,-9, 
  /* [2][2][][] */ -61,58,-21,8,-59,9,34,83, -88,82,115,-37,12,55,102,80, -55,70,77,-96,22,49,64,40, 
  /* [3][0][][] */ -82,47,-7,-24,-107,-53,32,-28, -45,-15,42,-47,75,-76,-34,-102, 48,-10,-66,-40,10,-51,-75,19, 
  /* [3][1][][] */ 66,74,-9,-69,-84,-31,48,-96, 48,-60,4,61,-10,-16,67,-63, 54,16,-85,-6,32,22,55,24, 
  /* [3][2][][] */ 3,-107,-48,-5,-1,-98,44,-111, 81,59,-14,-82,40,-67,58,-42, 59,84,-72,3,-44,-80,-109,-127, 
  /* [4][0][][] */ 19,31,-47,-5,25,23,81,-26, -65,92,-12,88,84,-19,67,-3, 18,-6,-86,-37,9,35,-102,-7, 
  /* [4][1][][] */ 110,91,-22,-84,-56,-26,-14,59, 28,49,74,10,81,-27,10,90, 48,-93,28,95,-43,127,-39,7, 
  /* [4][2][][] */ -67,51,-83,-89,55,-42,-6,0, 77,7,-75,50,-45,-84,-8,17, -8,53,-90,97,-105,23,50,-3, 
  /* [5][0][][] */ -2,38,29,-60,127,55,114,32, 49,-19,81,-33,-5,59,50,41, -48,55,42,-52,70,84,62,54, 
  /* [5][1][][] */ 65,35,-24,87,91,49,42,-55, -20,-55,19,-24,44,61,102,-5, 48,59,95,51,34,-8,44,-40, 
  /* [5][2][][] */ -6,-33,49,101,35,82,-41,-95, 16,21,31,67,117,-15,56,-9, 89,18,-56,-2,-52,56,-3,30, 
  /* [6][0][][] */ -74,84,72,20,-48,126,-31,117, -102,63,70,40,28,109,66,118, -85,114,80,-30,-36,-64,-40,127, 
  /* [6][1][][] */ -18,-42,46,-30,59,-56,98,82, 21,95,22,46,80,61,113,-50, -2,86,18,-46,30,-56,31,86, 
  /* [6][2][][] */ 3,43,10,96,81,118,-56,105, 11,2,-32,98,66,-50,-39,-17, 95,-55,-46,14,82,51,19,104, 
  /* [7][0][][] */ 77,-8,-19,-82,73,-95,-19,17, -16,-127,88,38,63,46,-81,-17, -117,-40,-43,-1,-19,8,-115,-112, 
  /* [7][1][][] */ -3,33,-13,39,-59,85,6,-92, 65,-41,50,-44,90,-107,-53,-91, 28,24,-44,-22,83,25,46,-36, 
  /* [7][2][][] */ -76,-50,61,38,-84,-89,-6,-109, 76,-80,-16,2,75,50,-56,-37, -30,31,18,10,-62,-26,-54,-115, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 8,3,3,8 } };
const TfArray<8, float> quant16_scale = { 8, { 0.0016514405142515898, 0.002519920701161027, 0.0022183989640325308, 0.0020722614135593176, 0.0018896185792982578, 0.0023207853082567453, 0.0019436817383393645, 0.0019533338490873575, } };
const TfArray<8, int> quant16_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(8) int8_t tensor_data17[16*3*3*8] = { 
  /* [0][0][][] */ 39,26,95,-8,9,98,127,15, -38,-37,3,-64,-29,11,-27,-116, 10,45,21,16,-15,-52,-31,-8, 
  /* [0][1][][] */ -10,12,21,-56,-41,82,-58,-16, -28,-70,19,58,-5,-3,52,-45, 40,-30,-11,57,-37,27,-42,-21, 
  /* [0][2][][] */ -68,-38,-68,39,-18,-6,27,-12, -3,-10,40,-13,28,60,29,-66, -18,-15,-16,43,-60,8,55,7, 
  /* [1][0][][] */ -20,-59,4,-64,36,-60,-53,-52, -13,-82,-6,-62,-49,-75,-78,-15, -50,10,4,-43,42,50,25,-80, 
  /* [1][1][][] */ -30,78,70,-8,-42,-20,-5,-20, -17,-23,53,-49,23,-48,12,-13, 9,58,31,59,-20,-12,11,-49, 
  /* [1][2][][] */ 23,78,127,-18,69,83,3,24, -86,28,88,12,-8,44,54,-64, 12,-50,-6,-46,-42,58,-18,23, 
  /* [2][0][][] */ -91,6,34,-29,-41,-97,82,17, -60,9,-99,96,-38,69,-59,-49, -15,66,33,55,-72,8,-102,88, 
  /* [2][1][][] */ 1,11,-11,52,41,-107,-61,-3, 83,-39,-32,-23,86,72,-86,16, -80,-28,47,-16,8,65,110,-80, 
  /* [2][2][][] */ 37,-100,-127,69,45,8,44,21, 46,-49,-14,80,53,34,-93,45, 31,-27,-15,16,89,29,24,80, 
  /* [3][0][][] */ 9,95,-51,-94,35,94,-38,-84, 107,105,90,3,-80,-103,-84,-57, -14,119,-40,89,-28,-49,-104,-1, 
  /* [3][1][][] */ -101,-68,-5,85,-34,13,31,-61, 99,86,-96,2,110,-68,32,-71, 12,70,82,-78,23,59,54,-101, 
  /* [3][2][][] */ -68,117,127,-120,91,-50,104,-40, 48,37,14,-25,-114,79,48,48, -38,-67,-82,111,68,24,23,-72, 
  /* [4][0][][] */ 44,-77,-28,85,-4,-1,33,-117, 88,47,64,-40,-62,126,-30,-73, 67,50,27,-55,-16,12,127,-39, 
  /* [4][1][][] */ -66,101,-26,34,-7,116,-51,-63, -14,44,45,13,81,55,-40,-89, -104,65,-5,59,-41,-18,94,-86, 
  /* [4][2][][] */ 86,-92,-100,-60,32,96,71,-83, -20,84,-66,-56,24,47,-11,2, -74,-34,-51,71,-5,68,2,-62, 
  /* [5][0][][] */ -98,-80,0,-58,88,-72,84,19, -39,20,76,73,71,110,24,-123, 82,81,27,-66,-32,65,-27,-105, 
  /* [5][1][][] */ -28,-27,-127,-93,35,31,21,13, 85,-7,46,51,74,57,-23,-116, -88,38,60,-63,-25,-39,85,26, 
  /* [5][2][][] */ 4,-91,-114,32,51,63,-17,49, -31,11,55,96,20,-76,-27,85, -5,29,44,68,-67,27,-79,-94, 
  /* [6][0][][] */ -53,-51,-31,25,40,66,91,-122, 67,-6,-47,-1,77,-4,-3,-50, -44,49,-66,-37,-16,-44,39,-49, 
  /* [6][1][][] */ -36,127,0,29,56,24,44,-63, 40,23,-73,-42,69,19,82,58, -14,8,53,-47,-18,50,44,10, 
  /* [6][2][][] */ -78,10,57,-71,-65,-56,70,-25, -66,-55,-20,-83,26,-20,-65,-22, 15,-8,41,85,87,-63,-20,-97, 
  /* [7][0][][] */ 56,-3,-101,-81,-15,-2,-74,62, -83,-11,-36,35,63,118,86,77, 89,89,87,-37,-54,48,79,-58, 
  /* [7][1][][] */ -29,69,-112,-37,23,-31,-39,63, -1,11,-127,-46,23,-34,-42,-53, 79,15,-4,79,63,35,59,10, 
  /* [7][2][][] */ 55,-66,74,30,39,-117,-114,68, -10,-28,31,-29,-27,-60,-42,13, 26,57,-12,24,-62,19,17,58, 
  /* [8][0][][] */ -105,62,-50,92,-48,-84,-80,-83, -118,-64,-68,18,-84,-111,-39,28, -42,-4,-47,34,1,74,32,-94, 
  /* [8][1][][] */ -112,28,40,-57,68,65,-42,-5, 69,-103,-24,29,47,65,-75,28, 33,99,17,-1,-23,71,94,-27, 
  /* [8][2][][] */ -47,-6,127,-67,56,-73,-74,125, 23,44,67,88,11,-31,-64,65, -3,-22,8,-54,-56,36,-23,71, 
  /* [9][0][][] */ 45,48,-74,-89,-38,14,50,87, -119,32,105,-38,112,10,88,-45, 63,119,89,12,-41,4,79,84, 
  /* [9][1][][] */ 36,-75,-124,57,-91,-20,11,-6, -15,-23,-17,-70,46,77,114,1, -2,79,38,11,-47,-77,58,-75, 
  /* [9][2][][] */ -26,-102,-94,-66,-106,-117,34,56, 9,39,-42,55,-58,-33,-55,43, -28,-28,-32,5,39,22,-67,-127, 
  /* [10][0][][] */ -127,-91,40,-38,-35,-18,1,53, -69,-80,48,57,-20,-8,78,-54, -84,111,-8,-32,2,-88,-58,3, 
  /* [10][1][][] */ -44,-67,-15,14,-48,-1,-9,28, 14,-34,-27,58,74,90,-72,74, -55,71,-23,97,-1,-37,10,-84, 
  /* [10][2][][] */ -44,30,28,33,-26,-74,-19,47, 49,28,-12,-37,105,11,87,-11, -35,104,35,57,80,86,-86,-14, 
  /* [11][0][][] */ 22,-92,-120,-103,114,-105,-105,64, 19,-10,-98,80,-60,-40,33,19, -12,-110,-4,-33,40,-2,-119,-10, 
  /* [11][1][][] */ -40,-43,97,-36,47,2,108,-11, -8,58,116,-92,43,74,102,48, 121,-29,96,-70,18,7,42,89, 
  /* [11][2][][] */ -101,40,20,98,-57,15,-124,117, 75,-85,-44,-26,-110,126,72,15, 96,-67,32,-123,-95,24,-86,-127, 
  /* [12][0][][] */ -60,127,77,-39,68,-41,57,-19, 43,-34,39,-15,43,13,64,-123, -29,100,15,-24,-1,89,-13,-101, 
  /* [12][1][][] */ -66,83,74,-52,74,7,125,-9, -84,96,58,-80,-41,2,13,-51, -82,21,-43,-41,-6,87,-49,-6, 
  /* [12][2][][] */ -69,78,-95,-59,77,66,-33,-61, -101,-4,-1,-27,-67,70,35,-84, -100,-24,-29,-78,-43,61,44,-54, 
  /* [13][0][][] */ -127,6,-5,52,-4,6,-95,-31, -57,-8,94,-21,66,106,-63,31, -15,-29,117,-56,-86,45,-15,-52, 
  /* [13][1][][] */ -35,-116,39,-76,11,81,-54,-5, 92,91,53,-96,35,84,-12,-17, -34,-23,-5,-79,-22,-32,20,-98, 
  /* [13][2][][] */ 54,-73,-79,83,-31,-81,5,27, -31,82,5,-83,40,3,35,62, 54,78,7,-100,9,40,27,-59, 
  /* [14][0][][] */ -42,-13,-22,75,-13,47,56,-29, -7,-98,18,7,21,61,78,42, 46,-32,-29,77,-17,44,48,78, 
  /* [14][1][][] */ -18,34,-43,38,-72,-81,-30,15, -41,58,-41,44,-6,-62,-37,8, -52,-81,-102,-74,-38,-25,-2,52, 
  /* [14][2][][] */ -27,31,33,-51,-4,-59,22,101, -54,-25,-101,-30,36,-17,-39,96, 14,-127,-35,5,26,-47,-59,74, 
  /* [15][0][][] */ -112,-85,59,-87,5,-13,26,-18, 19,-35,14,-100,-97,-1,-66,-36, -80,-71,123,-34,22,45,127,75, 
  /* [15][1][][] */ 59,-62,-23,-92,27,-116,-79,-85, 41,56,-36,17,62,56,-54,-14, -69,13,-82,53,-44,-15,-74,-63, 
  /* [15][2][][] */ -75,76,54,70,47,-98,-21,90, -115,-107,-44,-96,88,-4,-116,59, 50,-29,125,82,-67,33,-14,-65, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant17_scale = { 16, { 0.0023237492423504591, 0.0025039627216756344, 0.001559255993925035, 0.0013734200038015842, 0.0015270073199644685, 0.0018046079203486443, 0.001955108018592, 0.0018300471128895879, 0.0016639035893604159, 0.001610448001883924, 0.0017117062816396356, 0.0012683419045060873, 0.0018669466953724623, 0.0017700893804430962, 0.0019383585313335061, 0.0016037389868870378, } };
const TfArray<16, int> quant17_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(8) int8_t tensor_data18[16*3*3*16] = { 
  /* [0][0][][] */ -38,54,-59,-14,28,34,-36,-63,-69,-40,59,20,94,-12,-59,-58, -65,-35,-2,23,-3,49,-7,11,-3,-44,-26,1,-57,-29,-38,-71, 32,-40,25,16,-62,2,47,-69,-55,-56,22,-33,-93,-48,-2,26, 
  /* [0][1][][] */ 10,52,65,13,-2,34,65,127,51,75,66,74,44,96,-30,31, 90,-8,14,31,-19,68,46,-26,-62,35,11,76,65,30,-35,-30, -59,-6,-38,-59,-34,-43,50,-57,51,-85,39,-19,47,-79,67,28, 
  /* [0][2][][] */ 53,36,-32,2,25,-49,25,96,-10,-4,30,36,34,74,97,23, 27,-54,-35,-34,56,26,-42,16,33,32,-47,54,-25,48,-25,48, 50,26,-88,2,-35,-34,-69,-77,-90,-81,-4,-12,-61,-17,32,-51, 
  /* [1][0][][] */ -37,124,-59,18,112,-44,-8,-33,45,71,40,35,127,90,-39,38, 36,8,-30,80,9,36,53,40,-20,81,92,-59,62,50,75,0, -23,41,-21,95,-42,-40,31,-50,71,7,-60,18,87,73,-74,11, 
  /* [1][1][][] */ 84,9,-74,33,96,64,30,98,-68,29,76,68,112,114,38,-23, -62,-5,57,-73,-37,-52,65,7,29,92,-20,-69,7,-34,76,30, 20,-76,-19,-52,18,2,51,58,-47,-12,-48,-78,2,-14,26,4, 
  /* [1][2][][] */ 33,-33,65,-32,29,-5,36,-55,19,79,-11,21,-1,39,-90,63, -4,-16,-74,-18,37,-25,28,26,37,24,-60,-94,-15,-70,-88,2, 65,-27,-69,36,-7,33,3,-55,25,-72,22,29,-69,18,53,15, 
  /* [2][0][][] */ 94,-80,24,-9,-24,71,15,-16,-11,2,-17,-63,-56,70,-9,0, 86,-91,21,79,-6,63,64,-16,-90,-118,-106,-9,88,65,62,35, 89,-52,34,90,-77,-66,103,127,68,-45,64,70,-58,97,65,-39, 
  /* [2][1][][] */ 28,-12,16,-8,72,7,-78,-4,-75,70,-47,10,33,77,-35,-13, -4,26,-8,-61,43,17,-9,-7,43,34,-108,-83,-25,-50,31,54, -9,99,63,82,-29,-49,39,-4,24,-23,18,-71,-17,31,46,44, 
  /* [2][2][][] */ -104,-54,-60,22,-86,-31,-36,-45,23,-44,24,-36,-61,41,68,37, -74,-107,-8,1,-32,-51,27,15,-52,14,-22,-90,65,76,25,-20, 98,25,69,45,54,-67,17,-68,68,40,82,-47,-25,59,-5,20, 
  /* [3][0][][] */ -58,-50,53,39,41,-51,-23,-28,-38,41,16,60,-19,-42,-42,39, 12,5,-36,41,5,-21,31,-11,-4,65,-15,-47,-46,40,43,-10, -23,-43,16,-86,9,-4,37,40,49,-5,55,39,-127,-31,20,-20, 
  /* [3][1][][] */ -21,47,26,45,-34,2,-22,40,0,-37,-35,37,14,-67,81,-74, -19,-12,-58,-74,-49,48,23,-4,34,0,32,-41,-28,4,80,-3, -46,63,-36,7,-57,-86,39,-40,4,-22,-6,-31,-86,-10,47,-7, 
  /* [3][2][][] */ -49,37,-44,13,-76,7,-15,-27,10,50,44,18,-28,26,46,85, 36,-13,-11,-34,5,-9,-70,-26,-71,-39,-77,35,-30,30,-26,-2, 88,41,37,26,-88,20,-73,39,42,-7,15,90,-117,-10,96,27, 
  /* [4][0][][] */ 26,-94,-66,97,-114,60,68,-74,10,37,-6,-86,-71,99,19,-80, -102,66,-22,66,84,-127,-48,33,34,32,-6,23,-59,31,15,-3, -123,-29,97,5,-71,-115,-38,-116,0,-55,31,-92,-2,-38,-75,-110, 
  /* [4][1][][] */ -125,-91,13,-113,59,28,-107,-46,-45,-62,-68,97,-34,43,-4,-99, 44,-39,69,2,96,43,-82,-1,10,42,-101,64,-73,-87,117,-77, -14,35,56,-22,-11,-115,-76,-16,70,-1,107,-96,49,-10,115,-63, 
  /* [4][2][][] */ -98,-13,-4,-32,-63,55,8,69,2,89,98,-106,-109,-44,-122,35, 23,-7,85,-106,-61,-45,-68,83,106,-53,-26,96,18,1,37,59, -69,-24,76,80,-23,23,-83,71,6,-66,-15,-45,31,16,-102,54, 
  /* [5][0][][] */ -14,-106,-27,9,-43,-21,-105,97,-76,-77,-102,-105,-83,-57,112,20, -37,0,-90,62,103,-14,-36,-70,-58,-35,110,1,-36,-32,-6,90, 48,-79,94,17,71,-37,-104,-63,-59,-74,-93,-93,-4,63,68,100, 
  /* [5][1][][] */ 41,61,-57,-79,-29,-52,47,-89,-94,59,-28,-47,-47,-88,-38,65, -111,56,7,57,-58,2,-79,65,-121,-83,14,78,69,-127,-2,21, 89,-45,51,60,44,48,-5,12,-76,-99,21,88,-86,-39,-56,-60, 
  /* [5][2][][] */ 21,40,-102,4,30,21,-49,-82,15,98,57,-71,72,-84,-69,75, -107,15,80,-92,-111,41,39,96,48,-11,-115,-89,47,94,-68,14, -120,-39,-91,-90,59,-85,77,-107,54,-47,52,-74,-86,22,52,-2, 
  /* [6][0][][] */ -79,-35,47,-114,12,-55,-118,7,46,-40,-43,-38,-16,60,20,-49, -18,-57,-51,21,-54,-24,-38,-30,63,5,62,-88,28,-81,-35,-41, 24,31,51,-42,70,-35,49,50,70,81,26,-44,11,69,105,116, 
  /* [6][1][][] */ -17,47,-61,53,-67,-37,-52,82,-18,39,64,7,6,87,8,10, 77,98,-77,39,11,-2,56,-55,58,5,-73,11,-9,7,-89,47, -57,92,-31,96,66,-33,-1,-24,76,-25,-11,4,3,14,12,-1, 
  /* [6][2][][] */ -70,-56,40,74,40,-59,-82,95,-2,10,35,68,-82,58,-35,76, -36,-60,-40,-9,86,-49,-36,70,20,115,58,-40,22,67,-20,-56, 69,98,85,-53,111,93,104,29,-73,-15,-25,45,127,-3,104,92, 
  /* [7][0][][] */ 55,89,92,50,-3,13,-59,-103,46,22,-53,-98,-44,-11,-43,-24, 16,12,-3,-42,90,41,-93,-27,-69,-115,-77,7,-1,-111,80,41, -14,-58,42,91,-64,-40,-6,-54,45,74,35,-65,7,-43,-50,51, 
  /* [7][1][][] */ -40,66,-36,-73,-92,78,-106,-85,-56,15,41,-65,15,28,-5,60, 51,77,-32,-56,-104,-114,-95,49,-98,25,65,0,44,24,102,-5, 7,-52,-50,-127,-121,-52,12,21,49,80,75,-77,32,92,-90,-24, 
  /* [7][2][][] */ -115,-98,72,-94,-39,9,-118,-14,-73,-74,-67,67,19,-113,29,8, -45,51,65,79,95,-66,-22,-31,-66,-2,-71,45,-36,-116,-54,-35, 11,-35,-65,-79,-103,80,-106,-25,-4,-42,-42,79,7,51,14,47, 
  /* [8][0][][] */ 45,-5,-37,-59,34,36,51,-49,34,34,-35,60,20,-63,60,40, -9,-29,9,-1,80,-49,31,58,69,84,38,-48,65,-13,-52,20, 58,-12,-44,-23,76,65,-15,-27,12,34,24,-38,56,34,59,-63, 
  /* [8][1][][] */ 16,2,2,-79,-94,-92,37,-89,41,-66,47,-16,39,23,-1,-32, -38,66,-54,-35,13,70,84,-20,-59,-55,61,-15,5,18,-44,-66, 46,-59,52,41,61,35,-20,-40,43,15,37,-6,82,-20,53,-10, 
  /* [8][2][][] */ 47,-31,-20,-36,64,43,-77,-127,-30,29,31,-56,-11,-63,-101,-23, -12,56,-63,25,-14,-68,50,64,44,2,-12,24,-38,26,8,-25, -63,20,-34,6,39,-49,-42,-11,31,73,-32,-73,76,-73,-68,11, 
  /* [9][0][][] */ 84,64,-58,-11,-38,81,-26,-9,-19,-18,-89,-63,-35,55,14,-127, 19,-51,-33,-83,-24,-40,-30,-22,-26,42,75,9,17,-53,77,-26, 69,-19,-40,-64,64,24,65,23,3,59,88,53,11,72,55,-38, 
  /* [9][1][][] */ 86,-50,6,53,19,-5,2,49,16,-47,-31,-39,-9,-76,-64,-81, -34,79,-15,-27,51,10,27,-21,-16,-60,19,-39,-21,-38,86,71, -63,-34,-7,103,85,105,77,85,37,64,121,86,-49,28,87,116, 
  /* [9][2][][] */ 1,-57,84,15,-39,-44,-96,-69,-25,-69,-83,-26,-85,70,-34,67, 37,-58,-79,-14,-29,29,-55,-20,-53,57,-42,90,-86,31,-83,39, -44,113,-60,106,50,1,78,50,115,-47,17,110,-24,38,-8,-8, 
  /* [10][0][][] */ 79,127,-49,72,4,102,87,-7,-73,88,43,3,-18,0,-107,9, -88,91,16,49,85,27,-29,-105,-62,-91,-81,-9,7,-65,70,-7, 33,55,-43,-72,-84,-65,63,70,-76,0,87,-9,-71,-40,49,41, 
  /* [10][1][][] */ -8,-21,4,-16,-28,111,11,33,-49,40,-2,72,112,-6,-72,-37, -5,-41,-69,76,57,-6,2,-86,-36,26,-11,57,1,64,53,-18, 29,46,-41,-10,29,24,47,64,-65,-83,-24,-79,-19,21,-85,24, 
  /* [10][2][][] */ -20,6,-20,10,14,111,9,34,99,50,70,-18,102,-25,4,110, 11,-113,-50,86,-56,-52,62,56,26,-18,36,-21,-14,-52,69,-42, -27,18,-51,-60,-4,78,-60,-26,-11,23,72,13,26,43,53,7, 
  /* [11][0][][] */ 36,46,39,9,62,76,21,-8,-30,84,46,71,102,101,-22,52, -9,38,-56,-4,-19,36,34,18,0,-37,24,63,14,-7,-49,18, -84,84,-99,-45,-83,-58,-80,-114,-52,-115,15,39,24,-28,-65,-63, 
  /* [11][1][][] */ 87,-16,24,107,86,93,26,24,-50,113,13,25,25,109,43,89, 13,-13,-27,-5,12,-17,1,54,-22,53,46,-33,-6,35,-68,15, 13,43,-62,-10,-17,-44,24,-127,-74,-6,34,7,17,-64,-27,-95, 
  /* [11][2][][] */ 22,-27,11,10,71,51,30,72,10,-15,55,-23,65,10,-33,-47, -5,20,-1,-40,51,-5,5,-27,32,1,-3,17,-19,17,-19,-18, -15,-79,0,17,33,-30,38,22,-3,8,10,-24,-19,-37,46,-45, 
  /* [12][0][][] */ -50,-46,-45,89,78,7,-91,24,-54,11,34,-41,-53,-49,-50,88, -34,126,78,89,26,-42,82,56,89,49,100,-20,6,-20,-19,109, 106,-58,-96,49,61,21,78,22,-63,-2,-68,-1,127,0,-61,83, 
  /* [12][1][][] */ 29,-57,-36,17,-45,31,53,-1,-22,57,38,18,-56,-55,123,121, -17,-42,92,75,49,90,-3,61,1,86,70,86,-48,86,94,78, 104,-106,-41,-7,-38,72,-44,29,-95,-6,21,-77,-26,-49,20,-29, 
  /* [12][2][][] */ -21,-34,-5,-4,-59,5,-107,-113,-51,-46,21,-32,-3,19,-16,-48, 55,12,-77,-38,-68,-53,-34,69,36,9,84,76,-11,52,-43,-10, 41,-4,-18,-42,-55,60,40,44,6,-11,-31,26,22,26,60,-14, 
  /* [13][0][][] */ -5,-6,14,50,-19,-68,-60,-23,-15,-127,28,-73,-72,2,-73,0, -22,31,38,10,-69,8,50,1,18,24,16,45,-49,33,-12,74, -38,48,33,-38,-53,21,59,-41,61,-13,7,-27,30,50,29,-3, 
  /* [13][1][][] */ -75,15,-8,28,-23,-60,-84,-4,-25,-18,-54,-22,-71,-50,58,-77, -36,-68,41,-13,52,-7,23,-44,-19,44,-4,39,-36,60,-3,-53, 12,-8,48,-35,6,-3,-56,38,-16,26,-32,-14,-60,-3,-35,10, 
  /* [13][2][][] */ -78,45,32,-84,-70,42,38,-70,-31,-1,-20,36,-94,38,26,-18, 55,-37,56,-42,-67,24,-1,66,-74,-8,-1,-59,17,9,-57,-6, 62,22,-64,-20,24,66,-4,-15,36,76,37,3,11,-22,49,-33, 
  /* [14][0][][] */ 36,14,21,-15,33,23,-90,-75,9,69,39,-70,-78,97,126,-39, 3,-28,-7,14,8,63,-47,110,93,98,-7,-16,-49,121,-22,33, 102,20,-4,16,-4,48,92,-56,20,78,-43,-80,46,24,-52,-86, 
  /* [14][1][][] */ -70,25,-44,10,7,-14,-46,10,-19,-41,81,16,-24,74,66,72, -72,29,87,-69,27,82,63,44,43,31,107,-51,99,56,-80,45, 79,43,6,14,85,-13,85,60,-57,-39,10,-25,57,-24,-53,-17, 
  /* [14][2][][] */ 48,127,15,-37,88,-88,-4,-48,93,-25,-36,32,50,-1,-22,-2, 97,54,-6,-62,-10,87,73,-1,36,6,37,-28,14,15,52,-30, -21,63,-47,100,37,41,76,-12,2,-45,38,-50,-28,-19,73,-80, 
  /* [15][0][][] */ -41,-7,37,-80,-18,34,32,88,65,14,-31,66,44,36,86,70, 89,51,49,-74,-79,31,-25,62,-76,-28,-47,-7,-17,46,83,-68, -55,-110,21,-33,-80,20,50,-39,29,-66,42,91,-94,-64,-29,-11, 
  /* [15][1][][] */ 62,-12,17,-30,-79,49,-107,25,51,-39,-96,73,18,-38,3,-54, 18,-34,84,62,-9,-58,-48,60,-31,58,-9,19,-54,64,-75,41, -53,15,-10,13,-117,-54,-52,-50,-45,-97,-61,-4,-92,-33,-24,-20, 
  /* [15][2][][] */ -20,77,39,-79,-72,-32,26,-127,75,10,-58,96,29,-57,55,55, 63,13,-29,50,88,24,-16,51,-62,33,85,37,50,94,-47,27, 35,11,-15,3,-53,-56,87,17,34,17,35,-24,58,-54,-77,-36, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 16,3,3,16 } };
const TfArray<16, float> quant18_scale = { 16, { 0.0020611160434782505, 0.0016729712951928377, 0.0015333800110965967, 0.002034913981333375, 0.0012019934365525842, 0.0013076706090942025, 0.0016276588430628181, 0.0012886911863461137, 0.0019090245477855206, 0.0015599862672388554, 0.0016432349802926183, 0.0022810050286352634, 0.0016580722294747829, 0.0020979170221835375, 0.0014547072350978851, 0.0017603782471269369, } };
const TfArray<16, int> quant18_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,24,32,1 } };
const TfArray<1, float> quant19_scale = { 1, { 0.25145098567008972, } };
const TfArray<1, int> quant19_zero = { 1, { -99 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,24,32,8 } };
const TfArray<1, float> quant20_scale = { 1, { 0.08260837197303772, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,24,32,8 } };
const TfArray<1, float> quant21_scale = { 1, { 0.037915494292974472, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,12,16,8 } };
const TfArray<1, float> quant22_scale = { 1, { 0.037915494292974472, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,12,16,8 } };
const TfArray<1, float> quant23_scale = { 1, { 0.061555691063404083, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,6,8,8 } };
const TfArray<1, float> quant24_scale = { 1, { 0.061555691063404083, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,6,8,16 } };
const TfArray<1, float> quant25_scale = { 1, { 0.068804822862148285, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,3,4,16 } };
const TfArray<1, float> quant26_scale = { 1, { 0.068804822862148285, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,3,4,16 } };
const TfArray<1, float> quant27_scale = { 1, { 0.097290858626365662, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<2, int> tensor_dimension28 = { 2, { 1,192 } };
const TfArray<1, float> quant28_scale = { 1, { 0.097290858626365662, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<2, int> tensor_dimension29 = { 2, { 1,64 } };
const TfArray<1, float> quant29_scale = { 1, { 0.12468891590833664, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,32 } };
const TfArray<1, float> quant30_scale = { 1, { 0.24201962351799011, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<2, int> tensor_dimension31 = { 2, { 1,3 } };
const TfArray<1, float> quant31_scale = { 1, { 0.53078055381774902, } };
const TfArray<1, int> quant31_zero = { 1, { -66 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<2, int> tensor_dimension32 = { 2, { 1,3 } };
const TfArray<1, float> quant32_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant32_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,2 } };
const TfArray<1, int> outputs0 = { 1, { 19 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 19,14,3 } };
const TfArray<1, int> outputs1 = { 1, { 20 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 20,15,7 } };
const TfArray<1, int> outputs2 = { 1, { 21 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingValid, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 21 } };
const TfArray<1, int> outputs3 = { 1, { 22 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 22,16,8 } };
const TfArray<1, int> outputs4 = { 1, { 23 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 23 } };
const TfArray<1, int> outputs5 = { 1, { 24 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 24,17,9 } };
const TfArray<1, int> outputs6 = { 1, { 25 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 25 } };
const TfArray<1, int> outputs7 = { 1, { 26 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 26,18,10 } };
const TfArray<1, int> outputs8 = { 1, { 27 } };
const TfLiteReshapeParams opdata9 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs9 = { 2, { 27,1 } };
const TfArray<1, int> outputs9 = { 1, { 28 } };
const TfLiteFullyConnectedParams opdata10 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs10 = { 3, { 28,13,4 } };
const TfArray<1, int> outputs10 = { 1, { 29 } };
const TfLiteFullyConnectedParams opdata11 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs11 = { 3, { 29,11,5 } };
const TfArray<1, int> outputs11 = { 1, { 30 } };
const TfLiteFullyConnectedParams opdata12 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs12 = { 3, { 30,12,6 } };
const TfArray<1, int> outputs12 = { 1, { 31 } };
const TfLiteSoftmaxParams opdata13 = { 1 };
const TfArray<1, int> inputs13 = { 1, { 31 } };
const TfArray<1, int> outputs13 = { 1, { 32 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension0, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 12288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension19, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6144, (TfLiteIntArray*)&tensor_dimension20, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension21, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6144, (TfLiteIntArray*)&tensor_dimension22, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension23, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1536, (TfLiteIntArray*)&tensor_dimension24, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension25, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 768, (TfLiteIntArray*)&tensor_dimension26, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension27, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension29, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension31, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension32, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 33;
  for(size_t i = 0; i < 33; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 14; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 14; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  32, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 14; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
